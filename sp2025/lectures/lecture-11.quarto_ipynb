{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "date: '2025-02-20'\n",
        "discussion-items:\n",
        "- options: ''\n",
        "  post_text: ''\n",
        "  topic: Deliverable 4 graded.\n",
        "  url: ''\n",
        "- options: target=\"_blank\"\n",
        "  post_text: '- due 3/2, SUN'\n",
        "  topic: Deliverable 5 - Design document\n",
        "  url: https://virginiacommonwealth.instructure.com/courses/113813/assignments/1075770\n",
        "- options: target=\"_blank\"\n",
        "  post_text: '- due 2/23, SUN'\n",
        "  topic: Discussion 3 - Normal forms\n",
        "  url: https://virginiacommonwealth.instructure.com/courses/113813/assignments/1075915\n",
        "- options: target=\"_blank\"\n",
        "  post_text: '- due 2/25, TUE'\n",
        "  topic: Practice Quiz 3 - Analysis and Normal Forms\n",
        "  url: https://virginiacommonwealth.instructure.com/courses/113813/assignments/1081390\n",
        "lecture-id: 11\n",
        "lecture-topics:\n",
        "- topic: BCNF Terms and Definitions\n",
        "  url: _bcnf-terms-and-definitions.qmd\n",
        "- topic: Recognizing BCNF\n",
        "  url: _recognizing-bcnf.qmd\n",
        "title: Analysis and Normal Forms 2\n",
        "---"
      ],
      "id": "89d5a77a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "this_file = 'lecture-11.qmd'"
      ],
      "id": "1232f998",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| label: setup\n",
        "\n",
        "# Extract the filename\n",
        "from cnvsapi.build_utils import get_yaml_header\n",
        "content = get_yaml_header( this_file )\n",
        "\n",
        "lecture_id = content['lecture-id']\n",
        "\n",
        "n_rows = 8\n",
        "if \"n_rows\" in content.keys():\n",
        "    n_rows = content[\"n_rows\"]\n",
        "\n",
        "discussion_items = [\n",
        "    'This is a placeholder Lecture.'\n",
        "]\n",
        "if \"discussion-items\" in content.keys():\n",
        "    discussion_items = content[\"discussion-items\"]\n",
        "\n",
        "lecture_topics = [\n",
        "    'When ready, the complete lecture will replace this one.'\n",
        "]\n",
        "if \"lecture-topics\" in content.keys():\n",
        "    lecture_topics = content[\"lecture-topics\"]\n",
        "\n",
        "housekeeping_margin_column_width = \"5%\"\n",
        "housekeeping_left_column_width=\"52%\"\n",
        "housekeeping_right_column_width=\"43%\"\n",
        "\n",
        "housekeeping_vertical_spacer = \"25px\""
      ],
      "id": "setup",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Housekeeping\n"
      ],
      "id": "ef2c8244"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| output: asis\n",
        "\n",
        "#housekeeping_margin_column_width = \"10%\"\n",
        "#housekeeping_left_column_width=\"40%\"\n",
        "#housekeeping_right_column_width=\"40%\"\n",
        "#housekeeping_vertical_spacer = \"40px\"\n",
        "\n",
        "print(f\"\"\"\n",
        ":::: {{.columns}}\n",
        "::: {{.column width={housekeeping_margin_column_width}}}\n",
        ":::\n",
        "::: {{.column width={housekeeping_left_column_width}}}\n",
        "### Discussion items\n",
        "\"\"\")\n",
        "\n",
        "for i,item in enumerate(discussion_items):\n",
        "\n",
        "    if isinstance(item,dict):\n",
        "        topic = item.get(\"topic\",\"topic\")\n",
        "        url = item.get(\"url\",None)\n",
        "        opts = item.get(\"opts\",\"\")\n",
        "        if opts:\n",
        "            opts = f\"{{ {opts} }}\"\n",
        "        post_text = item.get(\"post_text\",\"\")\n",
        "        if url and not url==\".\":\n",
        "            s = f\"\\n* [{topic}]({url}){opts} {post_text}\"\n",
        "        else:\n",
        "            s = f\"\\n* {topic}\"\n",
        "        print(s)\n",
        "\n",
        "    elif isinstance(item,str):\n",
        "        print(f\"* {item}\\n\")\n",
        "    \n",
        "\n",
        "print(f\"\"\"\n",
        ":::\n",
        "::: {{.column width={housekeeping_right_column_width}}}\n",
        "### Lecture topics\n",
        "\"\"\")\n",
        "\n",
        "for i,item in enumerate(lecture_topics):\n",
        "    if isinstance(item,dict):\n",
        "        topic = item.get(\"topic\",\"topic\")\n",
        "        url = item.get(\"url\",\"url\")  # this contains filename to include\n",
        "\n",
        "        internal_link = f\"#\"+topic.lower().replace(\" \",\"-\")\n",
        "        s = f\"\\n* [{topic}]({internal_link})\"\n",
        "        print(s)\n",
        "\n",
        "    elif isinstance(item,str):\n",
        "        print(f\"* {item}\\n\")\n",
        "\n",
        "print(f\"\"\"\n",
        "\n",
        ":::\n",
        "::::\n",
        "\"\"\")\n",
        "\n",
        "print(f\"\"\"\n",
        "::: {{ style=\"margin-top:{housekeeping_vertical_spacer}\"}}\n",
        "&nbsp;\n",
        ":::\n",
        "\"\"\")\n",
        "\n",
        "from cnvsapi.build_utils import upcoming_calendar\n",
        "# Set the lecture ID and number of rows to show at the top of this file!\n",
        "upcoming_calendar( lecture_id, n_rows )"
      ],
      "id": "e20d3dc8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<!-- lecture-block-begin -->\n",
        "\n",
        "# BCNF Terms and Definitions\n",
        "\n",
        "\n",
        "<!-- # Terms and definitions -->\n",
        "\n",
        "## *Schema* - Example 1\n",
        "\n",
        "A *schema* is a collection of one or more relations (tables). A *schema* is said\n",
        "to be in *Boyce-Codd Normal Form* when ALL the relations in the *schema*\n",
        "are in *BCNF*.  *BCNF* minimizes redundancy and duplicate information.\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=60%}\n",
        "\n",
        "::: {style=\"font-size:10pt\"}\n",
        "| RID  | Course                   | Instructor     | Languages             |\n",
        "|------|--------------------------|----------------|-----------------------|\n",
        "|  1   | CMSC508 Databases        | John Leonard   | SQL, Python, Perl     |\n",
        "|  2   | CMSC508 Databases        | Alberto Cano   | SQL, Python, C++      |\n",
        "|  3   | CMSC475 UI/UX design     | John Leonar    | Javascript, Python    |\n",
        "|  4   | CMSC441 Capstone         | Bob Dahlberg   | COBOL, FORTRAN        |\n",
        "|  5   | CMSC320 Data Structures  | Sarah Adams    | C++, Java, Python     |\n",
        "|  6   | CMSC210 Software Design  | Michael Turner | Java, C#              |\n",
        "|  7   | CMSC515 Computer Vision  | Emily Parker   | Python, MATLAB        |\n",
        "|  8   | CMSC430 Web Development  | Jessica Clark  | HTML, CSS, JavaScript |\n",
        "|  9   | CMSC610 Machine Learning | Albert Cano    | Python, R             |\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "::: {.column width=39%}\n",
        "The *schema* on the left is an example of a table coming directly out of *google forms* or some other survey tool.\n",
        "\n",
        "Each record contains groups of unrelated information, for example *Course*, *Instructor* and *Languages*.\n",
        "\n",
        "We can see duplicate values (*redundencies*) within these groups.\n",
        "\n",
        "We use *functional dependencies* to document these relationships.\n",
        ":::\n",
        "::::\n",
        "\n",
        "## *Schema* - Example 1\n",
        "\n",
        "A *schema* is a collection of one or more relations (tables). A *schema* is said\n",
        "to be in *Boyce-Codd Normal Form* when ALL the relations in the *schema*\n",
        "are in *BCNF*.  *BCNF* minimizes redundancy and duplicate information.\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=60%}\n",
        "\n",
        "::: {style=\"font-size:10pt\"}\n",
        "| RID  | Course                   | Instructor     | Languages             |\n",
        "|------|--------------------------|----------------|-----------------------|\n",
        "|  1   | CMSC508 Databases        | John Leonard   | SQL, Python, Perl     |\n",
        "|  2   | CMSC508 Databases        | Alberto Cano   | SQL, Python, C++      |\n",
        "|  3   | CMSC475 UI/UX design     | John Leonar    | Javascript, Python    |\n",
        "|  4   | CMSC441 Capstone         | Bob Dahlberg   | COBOL, FORTRAN        |\n",
        "|  5   | CMSC320 Data Structures  | Sarah Adams    | C++, Java, Python     |\n",
        "|  6   | CMSC210 Software Design  | Michael Turner | Java, C#              |\n",
        "|  7   | CMSC515 Computer Vision  | Emily Parker   | Python, MATLAB        |\n",
        "|  8   | CMSC430 Web Development  | Jessica Clark  | HTML, CSS, JavaScript |\n",
        "|  9   | CMSC610 Machine Learning | Albert Cano    | Python, R             |\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "::: {.column width=39%}\n",
        "*Functional dependencies* are an INPUT - that is, the database designer is responsible for describing the relationships between columns in their schema.\n",
        "\n",
        "We define *normal forms* to describe the strictness of the *functional dependencies.*  A higher normal form is more strict with it's functional dependencies.\n",
        "\n",
        "Given any schema $S$ consisting of relations $R$ and set of functional dependencies $F$ for each $R$, a schema is said to be in BCNF when all the relations in $S$ are in BCNF.\n",
        ":::\n",
        "::::\n",
        "\n",
        "## *Schema* - Example 1\n",
        "\n",
        "A *schema* is a collection of one or more relations (tables). A *schema* is said\n",
        "to be in *Boyce-Codd Normal Form* when ALL the relations in the *schema*\n",
        "are in *BCNF*.  *BCNF* minimizes redundancy and duplicate information.\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=60%}\n",
        "\n",
        "::: {style=\"font-size:10pt\"}\n",
        "| RID  | Course                   | Instructor     | Languages             |\n",
        "|------|--------------------------|----------------|-----------------------|\n",
        "|  1   | CMSC508 Databases        | John Leonard   | SQL, Python, Perl     |\n",
        "|  2   | CMSC508 Databases        | Alberto Cano   | SQL, Python, C++      |\n",
        "|  3   | CMSC475 UI/UX design     | John Leonar    | Javascript, Python    |\n",
        "|  4   | CMSC441 Capstone         | Bob Dahlberg   | COBOL, FORTRAN        |\n",
        "|  5   | CMSC320 Data Structures  | Sarah Adams    | C++, Java, Python     |\n",
        "|  6   | CMSC210 Software Design  | Michael Turner | Java, C#              |\n",
        "|  7   | CMSC515 Computer Vision  | Emily Parker   | Python, MATLAB        |\n",
        "|  8   | CMSC430 Web Development  | Jessica Clark  | HTML, CSS, JavaScript |\n",
        "|  9   | CMSC610 Machine Learning | Albert Cano    | Python, R             |\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "::: {.column width=39%}\n",
        "The schema on the left which consists of only one relation.\n",
        "\n",
        "The schema contains *non-atomic attributes*, *partial*, *transitive*, and *multi-valued* dependencies and is not in BCNF.\n",
        "\n",
        "Through a process of *decomposition* we remove non-atomic attributes, partial, transitive and multivalued dependencies and achieve BCNF.\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        "## Schema - Example 2\n",
        "\n",
        "This schema *IS* in BCNF.\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=45%}\n",
        "\n",
        "::: {style=\"font-size:10pt\"}\n",
        "| RID | Course Code | First   | Last      | Language   |\n",
        "|---|-------------|---------|-----------|------------|\n",
        "| 1 | CMSC508     | John    | Leonard   | SQL        |\n",
        "| 1 | CMSC508     | John    | Leonard   | Python     |\n",
        "| 1 | CMSC508     | John    | Leonard   | Perl       |\n",
        "| 2 | CMSC508     | Alberto | Cano      | SQL        |\n",
        "| 2 | CMSC508     | Alberto | Cano      | Python     |\n",
        "| 2 | CMSC508     | Alberto | Cano      | C++        |\n",
        "| 3 | CMSC475     | John    | Leonard   | Javascript |\n",
        "| 3 | CMSC475     | John    | Leonard   | Python     |\n",
        "| 4 | CMSC441     | Bob     | Dahlberg  | COBOL      |\n",
        "| 4 | CMSC441     | Bob     | Dahlberg  | FORTRAN    |\n",
        "| 5 | CMSC320     | Sarah   | Adams     | C++        |\n",
        "| 5 | CMSC320     | Sarah   | Adams     | Java       |\n",
        "| 5 | CMSC320     | Sarah   | Adams     | Python     |\n",
        "| 6 | CMSC210     | Michael | Turner    | Java       |\n",
        "| 6 | CMSC210     | Michael | Turner    | C#         |\n",
        "| 7 | CMSC515     | Emily   | Parker    | Python     |\n",
        "| 7 | CMSC515     | Emily   | Parker    | MATLAB     |\n",
        "| 8 | CMSC430     | Jessica | Clark     | HTML       |\n",
        "| 8 | CMSC430     | Jessica | Clark     | CSS        |\n",
        "| 8 | CMSC430     | Jessica | Clark     | JavaScript |\n",
        "| 9 | CMSC610     | Alberto | Cano      | Python     |\n",
        "| 9 | CMSC610     | Alberto | Cano      | R          |\n",
        ":::\n",
        "\n",
        ":::\n",
        "::: {.column width=28%}\n",
        "\n",
        ":::{style=\"font-size:10pt\"}\n",
        "\n",
        "| Course Code | Course Name       |\n",
        "|-------------|-------------------|\n",
        "| CMSC210     | Software Design   |\n",
        "| CMSC320     | Data Structures   |\n",
        "| CMSC430     | Web Development   |\n",
        "| CMSC441     | Capstone          |\n",
        "| CMSC475     | UI/UX design      |\n",
        "| CMSC508     | Databases         |\n",
        "| CMSC515     | Computer Vision   |\n",
        "| CMSC610     | Machine Learning  |\n",
        "\n",
        "<p>&nbsp;</p>\n",
        "\n",
        "|  First   |    Last  |\n",
        "|----------|----------|\n",
        "|  Alberto | Cano     |\n",
        "|  Bob     | Dahlberg |\n",
        "|  Sarah   | Adams    |\n",
        "|  John    | Leonard  |\n",
        "|  Michael | Turner   |\n",
        "|  Emily   | Parker   |\n",
        "|  Jessica | Clark    |\n",
        ":::\n",
        "\n",
        ":::\n",
        "::: {.column width=10%}\n",
        "\n",
        "::: {style=\"font-size:10pt\"}\n",
        "\n",
        "| Language   |\n",
        "|------------|\n",
        "| SQL        |\n",
        "| Python     |\n",
        "| Perl       |\n",
        "| C++        |\n",
        "| Javascript |\n",
        "| COBOL      |\n",
        "| FORTRAN    |\n",
        "| Java       |\n",
        "| C#         |\n",
        "| MATLAB     |\n",
        "| HTML       |\n",
        "| CSS        |\n",
        "| R          |\n",
        ":::\n",
        "\n",
        ":::\n",
        "\n",
        "::: {.column width=9%}\n",
        "\n",
        "::: {style=\"font-size:10pt\"}\n",
        "\n",
        "| RID |\n",
        "|---|\n",
        "| 1 |\n",
        "| 2 |\n",
        "| 3 |\n",
        "| 4 |\n",
        "| 5 |\n",
        "| 6 |\n",
        "| 7 |\n",
        "| 8 |\n",
        "| 9 |\n",
        "\n",
        ":::\n",
        ":::\n",
        "::::\n",
        "\n",
        "## Normal Forms - Overview\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=50%}\n",
        "\n",
        "Database normalization is the process of reorganizing the relations $R$ in a schema $S$ to minimize data redundancy.\n",
        "\n",
        "Normalization involves subdividing a relation $R$ into less redundant and smaller relations (fewer columns) without losing information by leveraging the functional dependencies (relationships) of $R$.\n",
        "\n",
        "The objective is to isolate related data to minimize duplicates and so modifications of an attribute can be made in just one table and then propagated through the rest of the database using the defined foreign keys and joins.\n",
        "\n",
        "Escalating through the different normal forms removes more and more redundancy.\n",
        "\n",
        ":::\n",
        "::: {.column width=50%}\n",
        "\n",
        "![](assets/normal-forms-picture.png)\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        "## Normal Forms - Defined\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column}\n",
        "First Normal Form - 1NF\n",
        ": A relation is in 1NF if and only if the domain of each attribute contains only atomic (indivisible) values and the value of each attribute contains only a single value from that domain.\n",
        "\n",
        "Second Normal Form - 2NF\n",
        ": A relation is in 2NF if and only if it is in 1NF and all non-prime attributes (attributes not part of any candidate key) are fully functionally dependent on the entire candidate key.\n",
        "\n",
        "Third Normal Form - 3NF\n",
        ": A relation is in 3NF if and only if it is in 2NF, and it has no transitive dependencies.\n",
        "\n",
        "Boyce-Codd Normal Form - BCNF\n",
        ": A relation is in BCNF if and only if it is in 1NF, and for every non-trivial functional dependency A -> B, A is a superkey.\n",
        "\n",
        ":::\n",
        "::: {.column}\n",
        "Fourth Normal Form - 4NF\n",
        ": A relation is in 4NF if and only if it is in BCNF, and it has no multi-valued dependencies.\n",
        "\n",
        "Fifth Normal Form - 5NF\n",
        ": A relation is in 5NF if and only if it is in 4NF, and it avoids join dependencies.\n",
        "\n",
        "Sixth Normal Form - 6NF\n",
        ": A relation is in 6NF if and only if it is in 5NF, and it further eliminates all join dependencies and assures that every join dependency can be enforced by the superkeys of the relation.\n",
        "\n",
        "Seventh Normal Form - 7NF\n",
        ": A relation is in 7NF if and only if it is in 6NF, and it eliminates all combinatorial join dependencies, ensuring that every possible join dependency is addressed.\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        "\n",
        "## First normal form - 1NF\n",
        "\n",
        "A relation is in *1NF* if and only if the domain of each attribute contains only atomic (indivisible) values and the value of each attribute contains only a single value from that domain.\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=60%}\n",
        "\n",
        "::: {style=\"font-size:10pt\"}\n",
        "| RID  | Course                   | Instructor     | Languages             |\n",
        "|------|--------------------------|----------------|-----------------------|\n",
        "|  1   | CMSC508 Databases        | John Leonard   | SQL, Python, Perl     |\n",
        "|  2   | CMSC508 Databases        | Alberto Cano   | SQL, Python, C++      |\n",
        "|  3   | CMSC475 UI/UX design     | John Leonar    | Javascript, Python    |\n",
        "|  4   | CMSC441 Capstone         | Bob Dahlberg   | COBOL, FORTRAN        |\n",
        "|  5   | CMSC320 Data Structures  | Sarah Adams    | C++, Java, Python     |\n",
        "|  6   | CMSC210 Software Design  | Michael Turner | Java, C#              |\n",
        "|  7   | CMSC515 Computer Vision  | Emily Parker   | Python, MATLAB        |\n",
        "|  8   | CMSC430 Web Development  | Jessica Clark  | HTML, CSS, JavaScript |\n",
        "|  9   | CMSC610 Machine Learning | Albert Cano    | Python, R             |\n",
        ":::\n",
        "\n",
        ":::\n",
        "::: {.column width=40%}\n",
        "\n",
        "Here is our starting relation - a table created by google forms or something.\n",
        "\n",
        "This relation is NOT in first normal form.\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        "## First normal form - 1NF\n",
        "\n",
        "A relation is in *1NF* if and only if the domain of each attribute contains only atomic (indivisible) values and the value of each attribute contains only a single value from that domain.\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=60%}\n",
        "\n",
        "::: {style=\"font-size:10pt\"}\n",
        "| RID | Course Code | Course Name       | First   | Last      | Language   |\n",
        "|---|-------------|-------------------|---------|-----------|------------|\n",
        "| 1 | CMSC508     | Databases         | John    | Leonard   | SQL        |\n",
        "| 1 | CMSC508     | Databases         | John    | Leonard   | Python     |\n",
        "| 1 | CMSC508     | Databases         | John    | Leonard   | Perl       |\n",
        "| 2 | CMSC508     | Databases         | Alberto | Cano      | SQL        |\n",
        "| 2 | CMSC508     | Databases         | Alberto | Cano      | Python     |\n",
        "| 2 | CMSC508     | Databases         | Alberto | Cano      | C++        |\n",
        "| 3 | CMSC475     | UI/UX design      | John    | Leonard   | Javascript |\n",
        "| 3 | CMSC475     | UI/UX design      | John    | Leonard   | Python     |\n",
        "| 4 | CMSC441     | Capstone          | Bob     | Dahlberg  | COBOL      |\n",
        "| 4 | CMSC441     | Capstone          | Bob     | Dahlberg  | FORTRAN    |\n",
        "| 5 | CMSC320     | Data Structures   | Sarah   | Adams     | C++        |\n",
        "| 5 | CMSC320     | Data Structures   | Sarah   | Adams     | Java       |\n",
        "| 5 | CMSC320     | Data Structures   | Sarah   | Adams     | Python     |\n",
        "\n",
        "<!--\n",
        "| 6 | CMSC210     | Software Design   | Michael | Turner    | Java       |\n",
        "| 6 | CMSC210     | Software Design   | Michael | Turner    | C#         |\n",
        "| 7 | CMSC515     | Computer Vision   | Emily   | Parker    | Python     |\n",
        "| 7 | CMSC515     | Computer Vision   | Emily   | Parker    | MATLAB     |\n",
        "| 8 | CMSC430     | Web Development   | Jessica | Clark     | HTML       |\n",
        "| 8 | CMSC430     | Web Development   | Jessica | Clark     | CSS        |\n",
        "| 8 | CMSC430     | Web Development   | Jessica | Clark     | JavaScript |\n",
        "| 9 | CMSC610     | Machine Learning  | Alberto | Cano      | Python     |\n",
        "| 9 | CMSC610     | Machine Learning  | Alberto | Cano      | R          |\n",
        "-->\n",
        "\n",
        ":::\n",
        "\n",
        ":::\n",
        "::: {.column width=40%}\n",
        "Starting with the previous relation, we *decomposed* individual columns such that each column contains only atomic elements.  \n",
        "\n",
        "We also removed multi-valued attributed by dropping them into their own row and duplicating the remaining attributes.\n",
        "\n",
        "*This relation is now in first normal form.*\n",
        "\n",
        "### Questions\n",
        "\n",
        "* What is a candidate key for this relation?\n",
        "\n",
        "* That is, what combination of fields can I choose to uniquely\n",
        "identify each tuple in the relation?\n",
        ":::\n",
        "::::\n",
        "\n",
        "## First normal form - 1NF\n",
        "\n",
        "Is this relation in first normal form? If so, why?\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column}\n",
        "\n",
        "::: {style=\"font-size:11pt\"}\n",
        "| EmployeeID | EmployeeName | DepartmentID | DepartmentName | ProjectID | ProjectName | ProjectBudget | Role |\n",
        "|------------|--------------|--------------|----------------|-----------|-------------|---------------|------|\n",
        "| E001       | Alice        | D01          | Marketing       | P001      | AdCampaign  | 10000         | Lead |\n",
        "| E002       | Bob          | D02          | Sales           | P002      | SalesCRM    | 20000         | Lead  |\n",
        "| E003       | Alice        | D01          | Marketing       | P002      | SalesCRM    | 20000         | Analyst |\n",
        "| E004       | Charlie      | D03          | IT              | P003      | ITInfra     | 15000         | Admin |\n",
        "| E002       | Bob          | D02          | Sales           | P001      | AdCampaign  | 10000         | Tester |\n",
        ":::\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        "<p>&nbsp;</p>\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column}\n",
        "### Functional Dependencies\n",
        "\n",
        "A functional dependency is a relationship between attributes:\n",
        "\n",
        "   - `EmployeeID → EmployeeName, DepartmentID`\n",
        "   - `DepartmentID → DepartmentName`\n",
        "   - `ProjectID → ProjectName, ProjectBudget`\n",
        "   - `EmployeeID, ProjectID → Role`\n",
        "\n",
        "**YOU** have to state the function dependencies up front FIRST.\n",
        ":::\n",
        "::: {.column}\n",
        "### Questions\n",
        "\n",
        "* Which columns do we need to *uniquely* identify each row in this table? \n",
        "\n",
        "* Restated, given that some columns can predict other columns, what is the minimum\n",
        "set of columns that can predict the row?\n",
        "\n",
        "* Given $R$ and the set of functional depedencies $FD$, what is the *minimum candidate key* of $R$?\n",
        ":::\n",
        "::::\n",
        "\n",
        "## Functional Dependencies - Defined\n",
        "\n",
        "::: {style=\"font-size:14pt\"}\n",
        "Given a relation $R$, a set of attributes $X$ is said to *functionally determine* another set of attributes $Y$, (written $X \\rightarrow Y$):\n",
        "\n",
        "* If and only if, each value of $X$ is associated with only one value of $Y$, where $X$ is the antecedent and $Y$ is the consequent of the functional dependency.\n",
        "\n",
        "A functional dependency $X \\rightarrow Y$ holds over relation $R$ if, for every allowable instance $r$ of $R$:\n",
        "\n",
        "* For $𝑡_1 \\in 𝑟$ and $𝑡_2 \\in 𝑟$, $\\Pi_{𝑋}(𝑡_1) = \\Pi_{𝑋}(𝑡_2)$  implies $\\Pi_{𝑌}(𝑡_1) = \\Pi_{𝑌}(𝑡_2)$\n",
        "\n",
        "If the $X$ values agree then the $Y$ values must also agree.\n",
        "\n",
        "### Summary \n",
        "\n",
        "* A FD is a statement about relationships between attributes (columns).\n",
        "* A FD can only and must be identified based on semantics of the application not on current values.\n",
        "* Given some allowable instances of R, we can check if they violate some FDs, but we cannot tell if always holds over R!\n",
        "* A FD applies only in one direction; a second FD is defined for the other direction.\n",
        "\n",
        ":::\n",
        "\n",
        "## Second normal form - 2NF\n",
        "\n",
        "A relation is in *2NF* if and only if it is in *1NF* and all *non-prime attributes* (attributes not part of any *candidate key*) are *fully functionally dependent* on the *entire candidate key*.\n",
        "\n",
        "Second normal form removes *partial dependencies*.\n",
        "\n",
        "candidate key\n",
        ": A combination of attributes that *uniquely identifies* a tuple in a relation.\n",
        "\n",
        "prime- and non-prime attributes\n",
        ": *Prime* attributes are the columns in the *candidate key*.  *Non-prime* attributes are columns not in the candidate key. (unused attributes)\n",
        "\n",
        "fully functionally dependent\n",
        ": *Fully functionally dependent* means that a non-prime attribute is functionally dependent on the entire candidate key, but not on any proper subset of that key.\n",
        "\n",
        "partial dependency\n",
        ": A tuple is partially dependent if any non-prime attributes can be uniquely identify by a subset of the candidate key.\n",
        "\n",
        "\n",
        "## Second normal form - 2NF\n",
        "\n",
        "* Is this relation in second normal form?  Why or why not?\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column}\n",
        "\n",
        "::: {style=\"font-size:10pt\"}\n",
        "| EmployeeID | EmployeeName | DepartmentID | DepartmentName | ProjectID | ProjectName | ProjectBudget | Role |\n",
        "|------------|--------------|--------------|----------------|-----------|-------------|---------------|------|\n",
        "| E001       | Alice        | D01          | Marketing       | P001      | AdCampaign  | 10000         | Lead |\n",
        "| E002       | Bob          | D02          | Sales           | P002      | SalesCRM    | 20000         | Lead  |\n",
        "| E003       | Alice        | D01          | Marketing       | P002      | SalesCRM    | 20000         | Analyst |\n",
        "| E004       | Charlie      | D03          | IT              | P003      | ITInfra     | 15000         | Admin |\n",
        "| E002       | Bob          | D02          | Sales           | P001      | AdCampaign  | 10000         | Tester |\n",
        ":::\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column}\n",
        "### Functional Dependencies\n",
        "\n",
        "   - `EmployeeID → EmployeeName, DepartmentID`\n",
        "   - `DepartmentID → DepartmentName`\n",
        "   - `ProjectID → ProjectName, ProjectBudget`\n",
        "   - `EmployeeID, ProjectID → Role`\n",
        "\n",
        "### Candidate key\n",
        "\n",
        "If this is a candidate key: { `EmployeeID`,`ProjectID`,`Role` }\n",
        "\n",
        ":::\n",
        "::: {.column}\n",
        "* `EmployeeName` is a non-prime attribute.  (It's not in the candidate key).\n",
        "* `EmployeeName` is functionally dependent on `EmployeeID`\n",
        "* `EmployeeID` is a subset of the candidate key (above).\n",
        "* `EmployeeName` is partially dependent on the key - PROBLEM!!!\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        "A relation is in *2NF* if and only if it is in *1NF* and all *non-prime attributes* (attributes not part of any *candidate key*) are *fully functionally dependent* on the *entire candidate key*.\n",
        "\n",
        "## Second normal form - 2NF\n",
        "\n",
        "We can move from **1NF** to **2NF** by ensuring that all non-prime attributes (those not part of a candidate key) are fully functionally dependent on the entire candidate key. In this case, a partial dependency occurs when a non-prime attribute depends only on part of a composite candidate key, rather than the entire key.  Candidate key: {`EmployeeID`,`ProjectID`,`Role`}\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column}\n",
        "\n",
        "::: {style=\"font-size:11pt\"}\n",
        "\n",
        "| EmployeeID | EmployeeName | DepartmentID | DepartmentName |\n",
        "|------------|--------------|--------------|----------------|\n",
        "| E001       | Alice        | D01          | Marketing       |\n",
        "| E002       | Bob          | D02          | Sales           |\n",
        "| E003       | Alice        | D01          | Marketing       |\n",
        "| E004       | Charlie      | D03          | IT              |\n",
        "\n",
        "<p>&nbsp;</p>\n",
        "\n",
        "| ProjectID | ProjectName | ProjectBudget |\n",
        "|-----------|-------------|---------------|\n",
        "| P001      | AdCampaign  | 10000         |\n",
        "| P002      | SalesCRM    | 20000         |\n",
        "| P003      | ITInfra     | 15000         |\n",
        ":::\n",
        "\n",
        ":::\n",
        "::: {.column}\n",
        "\n",
        "::: {style=\"font-size:11pt\"}\n",
        "\n",
        "| Role    |\n",
        "|---------|\n",
        "| Lead    |\n",
        "| Analyst |\n",
        "| Admin   |\n",
        "| Tester  |\n",
        "\n",
        "<p>&nbsp;</p>\n",
        "\n",
        "| EmployeeID | ProjectID | Role    |\n",
        "|------------|-----------|---------|\n",
        "| E001       | P001      | Lead    |\n",
        "| E002       | P002      | Lead    |\n",
        "| E003       | P002      | Analyst |\n",
        "| E004       | P003      | Admin   |\n",
        "| E002       | P001      | Tester  |\n",
        "\n",
        ":::\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        "## Third Normal Form - 3NF\n",
        "\n",
        "A relation is in 3NF if and only if it is in 2NF, and it has no transitive dependencies.\n",
        "\n",
        "Third normal form removes *transitive dependencies*.\n",
        "\n",
        "candidate key\n",
        ": A combination of attributes that *uniquely identifies* a tuple in a relation.\n",
        "\n",
        "prime- and non-prime attributes\n",
        ": *Prime* attributes are the columns in the *candidate key*.  *Non-prime* attributes are columns not in the candidate key. (unused attributes)\n",
        "\n",
        "transitive dependency\n",
        ": A transitive dependency occurs when a non-prime attribute is indirectly dependent on a candidate key through another non-prime attribute.\n",
        "\n",
        "## Third Normal Form - 3NF\n",
        "\n",
        "A relation is in *3NF* if and only if it is in *2NF*, and it has no *transitive dependencies*.\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column}\n",
        "\n",
        ":::{style='font-size:10pt'}\n",
        "| EmployeeID | EmployeeName | DepartmentID | DepartmentName |\n",
        "|------------|--------------|--------------|----------------|\n",
        "| E001       | Alice        | D01          | Marketing       |\n",
        "| E002       | Bob          | D02          | Sales           |\n",
        "| E003       | Alice        | D01          | Marketing       |\n",
        "| E004       | Charlie      | D03          | IT              |\n",
        ":::\n",
        "\n",
        "<p>&nbsp;</p>\n",
        "\n",
        "Look at `DepartmentID` and `DepartmentName`\n",
        "\n",
        "- **`DepartmentName`** is transitively dependent on `EmployeeID` because:\n",
        "  - `DepartmentName` depends on `DepartmentID`.\n",
        "  - `DepartmentID` depends on `EmployeeID` (since each employee belongs to a department).\n",
        "  \n",
        ":::\n",
        "::: {.column}\n",
        "Thus, `DepartmentName` is not directly dependent on `EmployeeID` but is transitively dependent via `DepartmentID`.\n",
        "\n",
        "This kind of dependency violates **3NF (Third Normal Form)**, but is allowed in **2NF**.\n",
        "\n",
        "We can fix this by further decomposing this table into two smaller tables.  This will remove\n",
        "duplicates of department `D01`.\n",
        ":::\n",
        "::::\n",
        "\n",
        "## Third Normal Form - 3NF\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column}\n",
        "\n",
        "::: {style=\"font-size:11pt\"}\n",
        "\n",
        "| EmployeeID | EmployeeName | DepartmentID |\n",
        "|------------|--------------|--------------|\n",
        "| E001       | Alice        | D01          |\n",
        "| E002       | Bob          | D02          |\n",
        "| E003       | Alice        | D01          |\n",
        "| E004       | Charlie      | D03          |\n",
        "\n",
        "<p>&nbsp;</p>\n",
        "\n",
        "| ProjectID | ProjectName | ProjectBudget |\n",
        "|-----------|-------------|---------------|\n",
        "| P001      | AdCampaign  | 10000         |\n",
        "| P002      | SalesCRM    | 20000         |\n",
        "| P003      | ITInfra     | 15000         |\n",
        ":::\n",
        "\n",
        ":::\n",
        "::: {.column}\n",
        "\n",
        "::: {style=\"font-size:11pt\"}\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column}\n",
        "| Role    |\n",
        "|---------|\n",
        "| Lead    |\n",
        "| Analyst |\n",
        "| Admin   |\n",
        "| Tester  |\n",
        ":::\n",
        "::: {.column}\n",
        "\n",
        "   | DepartmentID | DepartmentName |\n",
        "   |--------------|----------------|\n",
        "   | D01          | Marketing      |\n",
        "   | D02          | Sales          |\n",
        "   | D03          | IT             |\n",
        ":::\n",
        "::::\n",
        "\n",
        "<p>&nbsp;</p>\n",
        "\n",
        "| EmployeeID | ProjectID | Role    |\n",
        "|------------|-----------|---------|\n",
        "| E001       | P001      | Lead    |\n",
        "| E002       | P002      | Lead    |\n",
        "| E003       | P002      | Analyst |\n",
        "| E004       | P003      | Admin   |\n",
        "| E002       | P001      | Tester  |\n",
        "\n",
        ":::\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        "This decomposition eliminates all partial and transitive dependencies, ensuring that each non-prime attribute is fully functionally dependent on the entire key of its respective table.\n",
        "\n",
        "## Boyce-Codd Normal Form (BCNF)\n",
        "\n",
        "A relation is in *BCNF* if and only if it is in *1NF*, and for every non-trivial functional dependency $A \\rightarrow B$, $A$ is a *superkey*.\n",
        "\n",
        "superkey\n",
        ": any set of attributes that can uniquely identify a tuple in a relation. A superkey can be larger than necessary (i.e., it can contain extra attributes that are not needed to uniquely identify a tuple).\n",
        "\n",
        "candidate key\n",
        ": a minimal superkey — meaning it contains no extraneous attributes. It is the smallest set of attributes that can uniquely identify a tuple.\n",
        "\n",
        "non-trival functional dependency\n",
        ": For a functional dependency $X \\rightarrow Y$, the dependency is: *Non-trivial* if $Y$ is not a subset of $X$, *Trivial* if $Y$ is a subset of $X$, meaning the RHS attributes are already part of the LHS.\n",
        "\n",
        "A **non-trivial functional dependency** is a type of functional dependency where the dependent attribute(s) on the right-hand side (RHS) are not a subset of the attributes on the left-hand side (LHS).\n",
        "\n",
        "**Non-trivial dependencies** are key to database normalization because they represent actual relationships between different sets of attributes. Trivial dependencies do not provide new information about the relationships in the data.\n",
        "\n",
        "## Glossary of terms\n",
        "\n",
        "Below are key terms and definitions.  You'll be defining these in homework 4.\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=\"33%\"}\n",
        "* Schema\n",
        "* Relation\n",
        "* Attribute\n",
        "* Tuple\n",
        "* Functional dependency\n",
        "* Candidate Key\n",
        "* Primary Key\n",
        "* Super Key\n",
        "* Composite Key\n",
        ":::\n",
        "::: {.column width=\"33%\"}\n",
        "* Prime attributes\n",
        "* Non-prime attributes\n",
        "* Armstrong’s axioms\n",
        "* Partial Dependency\n",
        "* Transitive Dependency\n",
        "* Attribute Closure\n",
        "* Decomposition\n",
        "* Lossless decomposition \n",
        "* Denormalization\n",
        ":::\n",
        "::: {.column width=\"33%\"}\n",
        "* Trivial functional dependencies \n",
        "* Closure of a set of FDs \n",
        "* Minimum canonical cover\n",
        "* First normal form (1NF)\n",
        "* Second normal form (2NF)\n",
        "* Third normal form (3NF)\n",
        "* Boyce Codd normal form (BCNF)\n",
        "* Fourth normal form (4NF)\n",
        ":::\n",
        "::::\n",
        "\n",
        "\n",
        "\n",
        "# Recognizing BCNF\n",
        "\n",
        "\n",
        "<!-- # Recognizing BCNF -->\n",
        "\n",
        "## Boyce-Codd Normal Form (BCNF) - Example 1\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=50%}\n",
        "\n",
        "A relation $R$ with functional dependencies $F$ is in BCNF if for all\n",
        "$X \\rightarrow Y$ in $F_{min}^+$:\n",
        "\n",
        "* $Y \\subseteq X$ (the trival FD), **OR**\n",
        "* $X$ is a superkey for $R$\n",
        "\n",
        "A relation is in BCNF if and only if it is in 1NF, and for every non-trivial functional dependency $A \\rightarrow B$, $A$ is a superkey.\n",
        "\n",
        ":::\n",
        "::: {.column width=50%}\n",
        "### Trivial FD{style=\"text-align:center\"}\n",
        "::: {style=\"font-size:10pt\"}\n",
        "\n",
        "| Language   |\n",
        "|------------|\n",
        "| SQL        |\n",
        "| Python     |\n",
        "| Perl       |\n",
        "| C++        |\n",
        "| Javascript |\n",
        "\n",
        "\n",
        ":::\n",
        ":::\n",
        "::::\n",
        "\n",
        "### Trival:  $X \\rightarrow X$\n",
        "\n",
        "```{dot}\n",
        "//| echo: false\n",
        "//| fig-width: 800px\n",
        "//| fig-height: 100px\n",
        "digraph G {\n",
        "    node [shape=ellipse]; // Set the shape of nodes to ellipses\n",
        "    bgcolor=\"#00000000\";\n",
        "    {rank=same;\n",
        "    // Define the four nodes\n",
        "    A [label=\"Language\"];\n",
        "    }\n",
        "    // Arrange the nodes in a horizontal row\n",
        "}\n",
        "```\n",
        "\n",
        "## Boyce-Codd Normal Form (BCNF) - Example 2\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=50%}\n",
        "\n",
        "A relation $R$ with functional dependencies $F$ is in BCNF if for all\n",
        "$X \\rightarrow Y$ in $F_{min}^+$:\n",
        "\n",
        "* $Y \\subseteq X$ (the trival FD), **OR**\n",
        "* $X$ is a superkey for $R$\n",
        "\n",
        "A relation is in BCNF if and only if it is in 1NF, and for every non-trivial functional dependency $A \\rightarrow B$, $A$ is a superkey.\n",
        "\n",
        ":::\n",
        "::: {.column width=50%}\n",
        "### Non-composite key {style=\"text-align:center\"}\n",
        "::: {style=\"font-size:10pt\"}\n",
        "\n",
        "| Course Code | Course Name       |\n",
        "|-------------|-------------------|\n",
        "| CMSC210     | Software Design   |\n",
        "| CMSC320     | Data Structures   |\n",
        "| CMSC430     | Web Development   |\n",
        "| CMSC441     | Capstone          |\n",
        "| CMSC475     | UI/UX design      |\n",
        "| CMSC508     | Databases         |\n",
        "| CMSC515     | Computer Vision   |\n",
        "| CMSC610     | Machine Learning  |\n",
        "\n",
        ":::\n",
        ":::\n",
        "::::\n",
        "### Non-composite key:  $X \\rightarrow Y$\n",
        "\n",
        "```{dot}\n",
        "//| echo: false\n",
        "//| fig-width: 800px\n",
        "//| fig-height: 800px\n",
        "digraph G {\n",
        "    node [shape=ellipse]; // Set the shape of nodes to ellipses\n",
        "    bgcolor=\"#00000000\";\n",
        "    {rank=same;\n",
        "    // Define the four nodes\n",
        "    A [label=\"Course code\"];\n",
        "    B [label=\"Course name\"];\n",
        "    }\n",
        "    // Arrange the nodes in a horizontal row\n",
        "    A -> B;\n",
        "}\n",
        "```\n",
        "\n",
        "## Boyce-Codd Normal Form (BCNF) - Example 3\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=50%}\n",
        "\n",
        "A relation $R$ with functional dependencies $F$ is in BCNF if for all\n",
        "$X \\rightarrow Y$ in $F_{min}^+$:\n",
        "\n",
        "* $Y \\subseteq X$ (the trival FD), **OR**\n",
        "* $X$ is a superkey for $R$\n",
        "\n",
        "A relation is in BCNF if and only if it is in 1NF, and for every non-trivial functional dependency $A \\rightarrow B$, $A$ is a superkey.\n",
        "\n",
        ":::\n",
        "::: {.column width=50%}\n",
        "### Composite key {style=\"text-align:center\"}\n",
        "::: {style=\"font-size:10pt\"}\n",
        "\n",
        "|  First   |    Last  |   Major   |\n",
        "|----------|----------|-----------|\n",
        "|  Alberto | Cano     |  Comp Sci  |\n",
        "|  Bob     | Dahlberg |  History  |\n",
        "|  Sarah   | Adams    |  Biology  |\n",
        "|  John    | Leonard  |  Civil Engr|\n",
        "|  Michael | Turner   |  Comp Sci |\n",
        "|  Emily   | Parker   |  English  |\n",
        "|  Jessica | Clark    |  Mathematics |\n",
        "\n",
        ":::\n",
        ":::\n",
        "::::\n",
        "\n",
        "### Composite key:  ${A,B} \\rightarrow C$\n",
        "\n",
        "```{dot}\n",
        "//| echo: false\n",
        "//| fig-width: 800px\n",
        "//| fig-height: 100px\n",
        "digraph G {\n",
        "    node [shape=ellipse]; // Set the shape of nodes to ellipses\n",
        "    bgcolor=\"#00000000\";\n",
        "    {rank=same;\n",
        "    // Define the four nodes\n",
        "    A [label=\"First, Last\"];\n",
        "    B [label=\"Major\"];\n",
        "    }\n",
        "    // Arrange the nodes in a horizontal row\n",
        "    A -> B;\n",
        "}\n",
        "```\n",
        "\n",
        "## Boyce-Codd Normal Form (BCNF) - Terms\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=50%}\n",
        "\n",
        "A relation $R$ with functional dependencies $F$ is in BCNF if for all\n",
        "$X \\rightarrow Y$ in $F_{min}^+$:\n",
        "\n",
        "* $Y \\subseteq X$ (the trival FD), **OR**\n",
        "* $X$ is a superkey for $R$\n",
        "\n",
        "A relation is in BCNF if and only if it is in *3NF*, and for every non-trivial functional dependency $A \\rightarrow B$, $A$ is a superkey.\n",
        "\n",
        ":::\n",
        "::: {.column width=50%}\n",
        "### Terms\n",
        "\n",
        "::: {style=\"font-size:11.5pt; margin-top:-10px\"}\n",
        "* Schemas and relations\n",
        "* Functional dependencies\n",
        "* Keys: Superkey, key, composite key\n",
        "* Prime and non-prime attributes\n",
        "* Armstrong's Axioms\n",
        "* Attribute closures\n",
        "* Minimum candidate keys\n",
        "* $F_{min}^+$ - minimal cover set\n",
        ":::\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        "### Non-composite key: $A \\rightarrow {B,C,D}$\n",
        "\n",
        "```{dot}\n",
        "//| echo: false\n",
        "//| fig-width: 800px\n",
        "//| fig-height: 100px\n",
        "digraph G {\n",
        "    node [shape=ellipse]; // Set the shape of nodes to ellipses\n",
        "    bgcolor=\"#00000000\";\n",
        "    {rank=same;\n",
        "     // Define the four nodes\n",
        "        A [label=\"A: Prime / Key\"];\n",
        "        B [label=\"D: Non prime attr\"];\n",
        "        C [label=\"C: Non prime attr\"];\n",
        "        D [label=\"B: Non prime attr\"];\n",
        "    }\n",
        "    // Arrange the nodes in a horizontal row\n",
        "    A -> D;\n",
        "    A -> C;\n",
        "    A -> B;\n",
        "}\n",
        "```\n",
        "\n",
        "::: {style=\"text-align:center\"}\n",
        "***The superkey, the whole key, and nothing but the key, so help me Codd!***\n",
        ":::\n",
        "\n",
        "## Boyce-Codd Normal Form (BCNF) - An algorithm\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=45%}\n",
        "\n",
        "### Algorithm\n",
        "\n",
        "Repeat for each relation $R$ in schema $S$:\n",
        "\n",
        "- Calculate attribute closures ${\\{X\\}}^+$\n",
        "- Determine minimum candidate keys ${C\\!K}_{min}$\n",
        "- Determine prime and non-prime attributes\n",
        "- Determine minimal cover set $F_{min}^+$\n",
        "- Determine highest normal form of relation $R$\n",
        "- Decompose input relation $R$ into BCNF\n",
        "\n",
        "Until all relations $R$ in schema $S$ are BCNF.\n",
        ":::\n",
        "::: {.column width=50%}\n",
        "### Skills for CMSC 508\n",
        "\n",
        "- By inspection determine if a relation $R$ is BCNF,\n",
        "- Translate schema $S$ into relational algebraic form,\n",
        "- Document functional dependencies for each $R$ in $S$,\n",
        "- Run [calculator by Raymond Cho](http://raymondcho.net/RelationalDatabaseTools/RelationalDatabaseTools.html),\n",
        "- Describe reports and algorithms used by calculator,\n",
        "- Interpret reports to find necessary outputs,\n",
        "- Identify decomposed BCNF relations from report.\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        "## Boyce-Codd Normal Form (BCNF) - A Worked Example\n",
        "\n",
        "::: {style=\"font-size:10pt\"}\n",
        "\n",
        "| EmployeeID | EmployeeName | DepartmentID | DepartmentName | ProjectID | ProjectName | ProjectBudget | Role |\n",
        "|------------|--------------|--------------|----------------|-----------|-------------|---------------|------|\n",
        "| E001       | Alice        | D01          | Marketing       | P001      | AdCampaign  | 10000         | Lead |\n",
        "| E002       | Bob          | D02          | Sales           | P002      | SalesCRM    | 20000         | Lead  |\n",
        "| E003       | Alice        | D01          | Marketing       | P002      | SalesCRM    | 20000         | Analyst |\n",
        "| E004       | Charlie      | D03          | IT              | P003      | ITInfra     | 15000         | Admin |\n",
        "| E002       | Bob          | D02          | Sales           | P001      | AdCampaign  | 10000         | Tester |\n",
        ":::\n",
        "\n",
        "<p>&nbsp;</p>\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=45%}\n",
        "\n",
        "### Input\n",
        "\n",
        "::: {style=\"font-size:12pt\"}\n",
        "The *schema* $S$ on consists of one *relation* $R$.\n",
        "\n",
        "In relational model notation:\n",
        "\n",
        "* $R( A,B,C,D,E,F,G,H )$\n",
        "* $FD( A \\rightarrow B; A \\rightarrow C; C \\rightarrow D; E \\rightarrow F,G )$\n",
        "\n",
        "Goal: decompose $S$ to *BCNF*\n",
        "\n",
        ":::\n",
        ":::\n",
        "::: {.column width=55%}\n",
        "\n",
        "### Output \n",
        "\n",
        "::: {style=\"font-size:12pt\"}\n",
        "Using the [calculator by Raymond Cho](http://raymondcho.net/RelationalDatabaseTools/RelationalDatabaseTools.html){target=\"_blank\"}, the resulting schema in BCNF:\n",
        "\n",
        "* $R_0(A,B,C)$ having FD(s): $A \\rightarrow B$; $A \\rightarrow C$\n",
        "* $R_1(C,D)$ having FD(s): $C \\rightarrow D$\n",
        "* $R_2(E,F,G)$ having FD(s): $E \\rightarrow F,G$\n",
        "* $R_3(A,E,H)$ having FD(s): (none).  This is the composite minimum key.\n",
        ":::\n",
        "\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        "## Boyce-Codd Normal Form (BCNF) - A Worked Example\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column}\n",
        "\n",
        "::: {style=\"font-size:11pt\"}\n",
        "\n",
        "$R_0(A,B,C)$\n",
        "\n",
        "| EmployeeID | EmployeeName | DepartmentID |\n",
        "|------------|--------------|--------------|\n",
        "| E001       | Alice        | D01          |\n",
        "| E002       | Bob          | D02          |\n",
        "| E003       | Alice        | D01          |\n",
        "| E004       | Charlie      | D03          |\n",
        "\n",
        "<p>&nbsp;</p>\n",
        "\n",
        "$R_2(E,F,G)$\n",
        "\n",
        "| ProjectID | ProjectName | ProjectBudget |\n",
        "|-----------|-------------|---------------|\n",
        "| P001      | AdCampaign  | 10000         |\n",
        "| P002      | SalesCRM    | 20000         |\n",
        "| P003      | ITInfra     | 15000         |\n",
        ":::\n",
        "\n",
        ":::\n",
        "::: {.column}\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=40%}\n",
        "\n",
        "::: {style=\"font-size:11pt\"}\n",
        "\n",
        "$R_4(H)$\n",
        "\n",
        "| Role    |\n",
        "|---------|\n",
        "| Lead    |\n",
        "| Analyst |\n",
        "| Admin   |\n",
        "| Tester  |\n",
        ":::\n",
        "\n",
        ":::\n",
        "::: {.column width=40%}\n",
        "\n",
        "::: {style=\"font-size:11pt\"}\n",
        "\n",
        "$R_1(C,D)$\n",
        "\n",
        "   | DepartmentID | DepartmentName |\n",
        "   |--------------|----------------|\n",
        "   | D01          | Marketing      |\n",
        "   | D02          | Sales          |\n",
        "   | D03          | IT             |\n",
        ":::\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        "<p>&nbsp;</p>\n",
        "\n",
        "::: {style=\"font-size:11pt\"}\n",
        "\n",
        "$R_3(A,E,H)$\n",
        "\n",
        "| EmployeeID | ProjectID | Role    |\n",
        "|------------|-----------|---------|\n",
        "| E001       | P001      | Lead    |\n",
        "| E002       | P002      | Lead    |\n",
        "| E003       | P002      | Analyst |\n",
        "| E004       | P003      | Admin   |\n",
        "| E002       | P001      | Tester  |\n",
        ":::\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        "\n",
        "\n",
        "<!-- lecture-block-end -->\n",
        "\n",
        "\n",
        "\n",
        "## Housekeeping\n"
      ],
      "id": "b62f917b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| output: asis\n",
        "\n",
        "#housekeeping_margin_column_width = \"10%\"\n",
        "#housekeeping_left_column_width=\"40%\"\n",
        "#housekeeping_right_column_width=\"40%\"\n",
        "#housekeeping_vertical_spacer = \"40px\"\n",
        "\n",
        "print(f\"\"\"\n",
        ":::: {{.columns}}\n",
        "::: {{.column width={housekeeping_margin_column_width}}}\n",
        ":::\n",
        "::: {{.column width={housekeeping_left_column_width}}}\n",
        "### Discussion items\n",
        "\"\"\")\n",
        "\n",
        "for i,item in enumerate(discussion_items):\n",
        "\n",
        "    if isinstance(item,dict):\n",
        "        topic = item.get(\"topic\",\"topic\")\n",
        "        url = item.get(\"url\",None)\n",
        "        opts = item.get(\"opts\",\"\")\n",
        "        if opts:\n",
        "            opts = f\"{{ {opts} }}\"\n",
        "        post_text = item.get(\"post_text\",\"\")\n",
        "        if url and not url==\".\":\n",
        "            s = f\"\\n* [{topic}]({url}){opts} {post_text}\"\n",
        "        else:\n",
        "            s = f\"\\n* {topic}\"\n",
        "        print(s)\n",
        "\n",
        "    elif isinstance(item,str):\n",
        "        print(f\"* {item}\\n\")\n",
        "    \n",
        "\n",
        "print(f\"\"\"\n",
        ":::\n",
        "::: {{.column width={housekeeping_right_column_width}}}\n",
        "### Lecture topics\n",
        "\"\"\")\n",
        "\n",
        "for i,item in enumerate(lecture_topics):\n",
        "    if isinstance(item,dict):\n",
        "        topic = item.get(\"topic\",\"topic\")\n",
        "        url = item.get(\"url\",\"url\")  # this contains filename to include\n",
        "\n",
        "        internal_link = f\"#\"+topic.lower().replace(\" \",\"-\")\n",
        "        s = f\"\\n* [{topic}]({internal_link})\"\n",
        "        print(s)\n",
        "\n",
        "    elif isinstance(item,str):\n",
        "        print(f\"* {item}\\n\")\n",
        "\n",
        "print(f\"\"\"\n",
        "\n",
        ":::\n",
        "::::\n",
        "\"\"\")\n",
        "\n",
        "print(f\"\"\"\n",
        "::: {{ style=\"margin-top:{housekeeping_vertical_spacer}\"}}\n",
        "&nbsp;\n",
        ":::\n",
        "\"\"\")\n",
        "\n",
        "from cnvsapi.build_utils import upcoming_calendar\n",
        "# Set the lecture ID and number of rows to show at the top of this file!\n",
        "upcoming_calendar( lecture_id, n_rows )"
      ],
      "id": "bd43e7e8",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/home/john/.cache/pypoetry/virtualenvs/cmsc408-course-admin-SiVgiy2p-py3.13/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}