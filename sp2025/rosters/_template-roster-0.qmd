---
title: REPLACE_ME
author: (autogenerated)
date: last-modified
format:
    html:
        theme: cosmos
#        embed-resources: true
        include-in-header:
            - text: |
                <style>
                .roster-container {
                    display: flex;
                    flex-wrap: wrap;
                    justify-content: center;
                }

                .roster-entry {
                    text-align: center;
                    margin: 5px;
                    width: 100px;
                }

                .roster-image {
                    width: 100px;
                    height: 125px;
                    border-radius: 0;
                    object-fit: cover;
                    margin-bottom: 0px;
                }

                .roster-name {
                    font-weight: normal;
                    font-size: 10pt;
                }
                p {
                    line-height: 0.8;
                }
                </style>
---

```{python}
#| echo: false
import os
from loguru import logger
from urllib.parse import urljoin
from cnvsapi.config import config
from cnvsapi.utils import as_pretty_json
#print( config.get_status() )

config.course_id = REPLACE_ME

def print_roster_role( people, role_id ):
    print(":::: {.roster-container}")
    used_names = []
    for id in people.keys():
        if people[id]["role_id"]==role_id and not people[id]["user"]["sortable_name"] in used_names and people[id]['enrollment_state']=="active":
            user = people[id]["user"]
            used_names.append( user["sortable_name"] )
            name = user["sortable_name"] + " (" + str(user["sis_user_id"]) + ")" + " (" + people[id]['enrollment_state'] + ")"
            if not user["sis_user_id"] is None:
                image = os.path.join(config.config["images"]["headshot_endpoint"],user["sis_user_id"]+".jpg")
                print(f"""
::: {{.roster-entry}}
![]({image}){{.roster-image}}
[{name}]{{.roster-name}}
:::
""")
    print(f"::::")

def get_roster_roles( enrollments ):
    """ return list of enrollment roles from current data structure """
    roles = {}
    for enrl in enrollments.values():
        if not enrl["role_id"] in roles.keys():
            roles[enrl["role_id"]] = enrl["role"].replace("Enrollment","s")
    return roles

```

```{python}
#| echo: false
#| output: asis

people = config.get_enrollments()
roles = get_roster_roles( people )
for id in sorted(roles.keys()):
    print(f"## {roles[id]}")
    print_roster_role( people, id )

```