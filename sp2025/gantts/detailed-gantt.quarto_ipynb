{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"\"\n",
        "---"
      ],
      "id": "a176f607"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| output: asis\n",
        "\n",
        "import pandas as pd\n",
        "\n",
        "from cnvsapi.build_utils import get_current_week_from_lecture_id, get_outline_objects, extract_outline\n",
        "from datetime import datetime, timedelta\n",
        "from cnvsapi.config import config\n",
        "\n",
        "output_file = \"./detailed-gantt.mmd\"\n",
        "\n",
        "\n",
        "outline_df = extract_outline().copy()\n",
        "outline_df.loc[:,'date'] = pd.to_datetime(outline_df['DateCanvas']).dt.date\n",
        "\n",
        "objects_df = get_outline_objects().copy()\n",
        "objects_df.loc[:,'canvas_due_at'] = pd.to_datetime(objects_df['canvas_due_at']).dt.date\n",
        "objects_df = objects_df.dropna(subset=[\"canvas_due_at\"])\n",
        "\n",
        "summary_df = outline_df.groupby('Module').agg(\n",
        "    earliest_date=('date', 'min'),\n",
        "    latest_date=('date', 'max')\n",
        ").reset_index()\n",
        "summary_df = summary_df.sort_values(by='earliest_date').reset_index(drop=True)\n",
        "\n",
        "# Find the row(s) where \"Notes, Lectures\" contains \"Classes begin\"\n",
        "matching_rows = outline_df[outline_df['Notes, Lectures'].str.lower().str.contains('classes begin', na=False)]\n",
        "first_date = pd.to_datetime(matching_rows['date'].iloc[0]).date()  - timedelta(days=1)\n",
        "if first_date is not None:\n",
        "    summary_df.at[0, 'earliest_date'] = first_date\n",
        "\n",
        "matching_rows = outline_df[outline_df['Notes, Lectures'].str.lower().str.contains('last day of classes', na=False)]\n",
        "last_date = pd.to_datetime(matching_rows['date'].iloc[0]).date()\n",
        "if last_date is not None:\n",
        "    summary_df.at[summary_df.index[-1], 'latest_date'] = last_date\n",
        "# Add one day to the latest dates to account for the 24-hours of the last day\n",
        "summary_df['latest_date'] = summary_df['latest_date'].apply(lambda x: x + timedelta(days=1))\n",
        "\n",
        "course = config.get_default_course()\n",
        "course_title = course['name']"
      ],
      "id": "e753c7a8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "def clean_title( title ):\n",
        "    return title.replace(\":\",\".\")\n",
        "\n",
        "\n",
        "def make_gantt():\n",
        "    \"\"\" make gant chart \"\"\"\n",
        "    # VCU gold: #FFB300\n",
        "\n",
        "        # Define the content you want to write to the file\n",
        "    content = []\n",
        "\n",
        "    # Start writing the header\n",
        "    content.append(f\"\"\"gantt\n",
        "    title {course_title}\n",
        "    dateFormat YYYY-MM-DD\n",
        "    axisFormat %b %e\n",
        "    todayMarker stroke-width:7px,stroke:#FFB300,opacity:0.5\n",
        "\"\"\"\n",
        "    )\n",
        "\n",
        "    for i,item in summary_df.iterrows():\n",
        "        deliverables_df = objects_df[ (objects_df['module']==item['Module']) & (objects_df['canvas_assignment_group']!=\"Projects\") ]\n",
        "        deliverables_df = objects_df[ (objects_df['module']==item['Module']) & (objects_df['canvas_assignment_group']!=\"Projects\") ]\n",
        "\n",
        " #       if not deliverables_df.empty:\n",
        "        deliverables_df = deliverables_df.sort_values(by='canvas_due_at').reset_index(drop=True)\n",
        "        content.append(f\"    section {item['Module']}\")\n",
        "        content.append(f\"    {item['Module']} : m{i}, {item['earliest_date']}, {item['latest_date']}\")\n",
        "        for j,row in deliverables_df.iterrows():\n",
        "            content.append(f\"    {clean_title(row['outline_entry'])} : milestone, {row['canvas_due_at']}, 0d\")\n",
        "        content.append(\"\")\n",
        "\n",
        "    projects_df = objects_df[ (objects_df['canvas_assignment_group']==\"Projects\") ]\n",
        "    if not projects_df.empty:\n",
        "        content.append(f\"    section Semester Project\")\n",
        "        for j,row in projects_df.sort_values(by='canvas_due_at').reset_index(drop=True).iterrows():\n",
        "            content.append(f\"    {clean_title(row['outline_entry'])} : milestone, {row['canvas_due_at']}, 0d\")\n",
        "        content.append(\"\")\n",
        "\n",
        "\n",
        "    # Open the file in write mode ('w' will create the file if it doesn't exist or overwrite it if it does)\n",
        "    with open(output_file, \"w\") as file:\n",
        "        file.write(\"\\n\".join(content))\n",
        "\n",
        "make_gantt()"
      ],
      "id": "28469b8f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {.no-filter}\n",
        "\n",
        "```{mermaid}\n",
        "%%| echo: false\n",
        "%%| file: ./detailed-gantt.mmd\n",
        "```\n",
        "\n",
        ":::"
      ],
      "id": "df40f060"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}