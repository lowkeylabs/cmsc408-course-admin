<!-- # Weak and Strong Entities -->

## Weak Entities in Database Design

Weak entities are entities that cannot be uniquely identified by their own attributes alone and rely on a relationship with another entity. Understanding how to correctly identify and work with weak entities is crucial for maintaining database integrity.

:::: {.columns}
::: {.column width=95%}

- Weak entities cannot exist independently and must be associated with a strong entity.
- Examples of weak entities include items like 'Invoice Line Items' that depend on an 'Invoice' entity.
- A weak entity's primary key is partially derived from the strong entity to which it is related.
- Weak entities are represented with a double rectangle in ER diagrams.
- Identifying relationships are denoted with a double diamond.
:::
::: {.column width=5%}

:::
::::

*Weak entities depend on strong entities for their identification and existence in the database.*




## Identifying Weak Entities

Identifying weak entities is essential to ensure proper relational schema design. They are recognized by their dependence on other entities for their unique identification.

:::: {.columns}
::: {.column width=95%}

- Weak entities have a partial key that is combined with a key from a related strong entity.
- Look for entities where the attribute set alone does not provide uniqueness.
- Consider cases where the existence of an entity depends on another entity.
- Examples include 'Order Items' that require an 'Order' to exist.
- Weak entities often model scenarios like detailed sub-components of a larger entity.
:::
::: {.column width=5%}

:::
::::

*Recognizing weak entities helps in correctly modeling real-world dependencies in a database.*




## Relationships Between Weak and Strong Entities

The relationship between a weak entity and its strong entity is crucial for maintaining data integrity and accurately representing real-world scenarios in a database.

:::: {.columns}
::: {.column width=95%}

- Weak entities are linked to strong entities via identifying relationships.
- The identifying relationship is a one-to-many relationship where the strong entity is on the "one" side.
- The primary key of the strong entity is included in the primary key of the weak entity.
- Identifying relationships ensure that weak entities cannot exist without their related strong entity.
- Represent this relationship with a double diamond in ER diagrams.
:::
::: {.column width=5%}

:::
::::

*Relationships between weak and strong entities ensure dependent data is accurately modeled and constrained.*




## Weak and Strong Entities - Examples

:::: {.columns}
::: {.column width=60%}

### Consider

Consider a stack of invoices.  Each invoice has a primary company address,
a customer billing address, and a customer ship-to address.  These addresses might be stored in a separate list of addresses for reuse.  These addresses are *strong entities*, that can exist without the invoice.

Each invoice contains a list of items to be purchased.  Each item has a item description, quantity, unit price and a total price. Item descriptions may be stored separately and connected to the invoice by an item id.

An item is a strong entity.  It can live without an invoice, for example in a table of items to create a product catalog.

*Invoice Line Items* are entities, too. BUT, they can't live independently of an invoice.  Their data (quantity, total price) are unique to this particular link in the invoice.  Thus, these are called **weak entities**.

:::
::: {.column width=40%}

### Invoice example

![](assets/weak-entity-invoice-example.png){.lightbox}
:::
::::




## Partial Keys and Their Role

Partial keys, also known as discriminator attributes, are used to distinguish between instances of a weak entity in the context of its related strong entity.

:::: {.columns}
::: {.column width=50%}

- A partial key is an attribute or a set of attributes that uniquely identify a weak entity for a given strong entity.
- Partial keys are combined with the primary key of the strong entity to create a unique identifier.
- Example: In an 'Invoice Line Item,' the line number is a partial key, while the invoice number is the key from the strong entity.
- Partial keys are often underlined with a dotted line in ER diagrams.
- Ensuring accurate definition of partial keys is critical for data integrity.
:::
::: {.column width=50%}
  ![](assets/weak-entity-invoice-example.png){.lightbox}
:::
::::

*Partial keys help uniquely identify weak entity instances in the context of their strong entities.*




## Examples of Weak Entities

Practical examples of weak entities help in understanding their application and importance in database design.

:::: {.columns}
::: {.column width=95%}

- 'Employee Dependents' are weak entities related to an 'Employee' strong entity.
- 'Order Items' require an associated 'Order' entity for their identification.
- 'Class Enrollments' are weak entities dependent on a 'Course' entity.
- 'Apartment Units' or 'Rooms' might depend on a 'Building' entity for their unique identification.
:::
::: {.column width=5%}

:::
::::

*Real-world examples illustrate how weak entities are essential in various relational models.*




## Symbolism and Notation in ER Diagrams

ER diagrams use specific symbols and notations to represent weak entities and their relationships with strong entities, ensuring clarity in design.

:::: {.columns}
::: {.column width=95%}

- Weak entities are symbolized by a double rectangle.
- Identifying relationships between weak and strong entities are shown with a double diamond.
- The partial key within a weak entity is often represented with a dotted underline.
- Strong entities are depicted with a single rectangle.
- The combination of symbols visually reinforces the dependency of weak entities.
:::
::: {.column width=5%}

:::
::::

*Understanding these symbols and notations is key to correctly interpreting and designing ER diagrams.*




## Importance of Identifying Relationships

Identifying relationships are fundamental in ensuring that weak entities are properly linked to their corresponding strong entities, maintaining database consistency.

:::: {.columns}
::: {.column width=95%}

- Identifying relationships ensure that weak entities are not independent.
- These relationships enforce referential integrity by requiring a link to a strong entity.
- The identifying relationship is critical in scenarios where data naturally depends on other data.
- Example: An 'Order Item' cannot exist without its corresponding 'Order.'
- Properly defined identifying relationships prevent orphaned records in a database.
:::
::: {.column width=5%}

:::
::::

*Identifying relationships are essential for maintaining the integrity and meaning of weak entities.*




## Common Mistakes with Weak Entities

Avoiding common pitfalls in modeling weak entities ensures the accuracy and integrity of the database design.

:::: {.columns}
::: {.column width=95%}

- Mistake: Treating weak entities as strong entities, leading to incorrect database schemas.
- Mistake: Failing to define identifying relationships, causing weak entities to lack context.
- Mistake: Incorrectly assigning partial keys, leading to non-unique or ambiguous identifiers.
- Mistake: Not using the appropriate symbols and notation in ER diagrams.
- Mistake: Over-complicating the model by incorrectly identifying weak entities.
:::
::: {.column width=5%}

:::
::::

*Avoiding these common mistakes ensures that weak entities are accurately and effectively modeled.*




## Best Practices for Modeling Weak Entities

Applying best practices in modeling weak entities leads to more accurate and effective database designs.

:::: {.columns}
::: {.column width=95%}

- Always confirm that weak entities cannot be uniquely identified by their attributes alone.
- Ensure that each weak entity is connected to a strong entity through an identifying relationship.
- Use appropriate symbols and notation to clearly represent weak entities in ER diagrams.
- Define partial keys carefully to ensure uniqueness within the context of the strong entity.
- Regularly review the model for consistency and alignment with real-world scenarios.
:::
::: {.column width=5%}

:::
::::

*Best practices guide the effective modeling of weak entities, ensuring database integrity.*



