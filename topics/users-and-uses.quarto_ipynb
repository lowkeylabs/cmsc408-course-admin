{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: Users and Uses\n",
        "tasl:\n",
        "    source: fa2023\\lectures\\lect04-ddl-dml-sqllite-mysql.qmd\n",
        "    tags:\n",
        "    - lecture\n",
        "    - lecture-04\n",
        "    topic: Users and Uses\n",
        "---\n",
        "\n",
        "\n",
        "# Users and Uses\n",
        "\n",
        "## Users and Uses\n",
        "\n",
        "End user\n",
        ": Uses application interfaces to access database\n",
        "\n",
        "Application programmer\n",
        ": Develops application interfaces (e.g., Web, API, mobile)\n",
        "\n",
        "Business Analyst\n",
        ": Uses query tools to directly access the data base (e.g. statistical business analyst)\n",
        "\n",
        "Database Administrator (DBA)\n",
        ": Designs logical and physical schemas\n",
        ": Handles security and authorization\n",
        ": Oversees data availability, crash recovery, software updates\n",
        ": Monitors performance and tunes database as needs evolve\n",
        ": Manages users and access control\n",
        "\n",
        "## Storage manager\n",
        "\n",
        "**Storage manager**\n",
        "\n",
        "* a program that provides the interface between the low-level data stored in the database and the application programs and queries submitted to the system.\n",
        "\n",
        "**Responsible for**\n",
        "\n",
        "* Interaction with the file manager\n",
        "* Efficient storing, retrieving and updating of data\n",
        "\n",
        "**Considerations**\n",
        "\n",
        "* Types of storage access\n",
        "* Types of file organization\n",
        "* Types of indexing and hashing\n",
        "* Types of authorization and access control\n",
        "* Data integritity\n",
        "\n",
        "## Query manager\n",
        "\n",
        ":::: {.columns}\n",
        "\n",
        "::: {.column}\n",
        "*Lots going on in between request and response!*\n",
        "\n",
        "* REQUEST (query)\n",
        "  - query parser\n",
        "  - relational algebraic evaluationr\n",
        "  - optimizer\n",
        "  - planner (detailed code)\n",
        "  - evaluator\n",
        "* RESPONSE (query output)\n",
        ":::\n",
        "::: {.column}\n",
        "![](assets/query-manager.png){width=80%}\n",
        ":::\n",
        "::::\n",
        "\n",
        "## Transaction example\n",
        "\n",
        "A **transaction** is a collection of operations that performs a single logical function in a database application\n",
        "\n",
        "**Transaction-manager** ensures that the database remains in a consistent (correct) state despite system failures (e.g., power failures and operating system crashes) and transaction failures.\n",
        "\n",
        "**Concurrency-control manager** controls the interaction among the concurrent transactions, to ensure the consistency of the database. \n",
        "\n",
        "![](assets/transaction-example.png){width=60% fig-align=\"center\"}\n",
        "\n",
        "## ACID properties\n",
        "Atomicity\n",
        ": Either all operations of the transaction are properly reflected in the database or none are\n",
        "\n",
        "Consistency\n",
        ":  Execution of a transaction in isolation preserves the consistency of the database\n",
        "\n",
        "Isolation\n",
        ":  Although multiple transactions may execute concurrently, each transaction must be unaware of other concurrently executing transactions.  *For every pair of transactions Ti and Tj, it appears to Ti that either Tj, finished execution before Ti started, or Tj started execution after Ti finished*\n",
        "\n",
        "Durability\n",
        ":  After a transaction completes successfully, the changes it has made to the database persist, even if there are system failures\n",
        "\n",
        "## Data Definition Language (DDL)\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column}\n",
        "* DDL compiler generates a set of tables stored in a data dictionary\n",
        "* Data dictionary contains metadata about:\n",
        "    - Database tables, fields and data types\n",
        "    - Primary and foreign keys\n",
        "    - Data integrity constrants\n",
        "    - Referential integrity\n",
        "    - Access and authorization rules\n",
        ":::\n",
        "::: {.column}\n",
        "### Example\n",
        "\n",
        "```{sql}\n",
        "CREATE TABLE person (\n",
        "    person_id INT PRIMARY KEY,\n",
        "    person_first_name VARCHAR(50),\n",
        "    person_last_name VARCHAR(50),\n",
        "    person_city VARCHAR(50)\n",
        ");\n",
        "\n",
        "```\n",
        "\n",
        "### Notes\n",
        "\n",
        "1. Fields are strongly typed,\n",
        "1. INT, VARCHAR(width), (lots more!)\n",
        "1. Additional attributed can be defined:\n",
        "    * PRIMARY KEY, FOREIGN KEY, etc.\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        "**SQL** (Structured Query Language) is the most widely used query declarative language for accessing relational databases.\n",
        "\n",
        "\n",
        "## Data Manipulation Language (DML)\n",
        "\n",
        "Provides statements for all the other non-data related\n",
        "activities in the data base:\n",
        "\n",
        "* managing users,\n",
        "* tuning storage,\n",
        "* backing up and replicating the data base,\n",
        "* managing physical storage on the system,\n",
        "* communicating with other systems.\n",
        "\n",
        "**SQL** (Structured Query Language) is the most widely used query declarative language for accessing relational databases.\n",
        "\n",
        "\n",
        "## Accessing the DBMS\n",
        "\n",
        "Using a command line\n",
        ": SSH into server to script creation and population of the databases.\n",
        ": Using a *connector*\n",
        "\n",
        "Using an API\n",
        ": ODBC, REST, graphQL or other approaches to manipulate aspects of the data base.\n",
        "\n",
        "Using PHPMyAdmin\n",
        ": Usually through a web browser to manage, monitor and tune the overall system.\n",
        "\n",
        "Using a PHP full stack\n",
        ": To run the application and use the database.\n",
        ": * LAMP  Linux : Apache : MySQL : PHP/Perl/Python\n",
        "\n",
        "Using NodeJS full stack\n",
        ": To run the application and use the data base\n",
        ": * MEAN  Mongo/MySQL : Express : Angular : Node\n",
        ": * MERN  Mondo/MySQL : Express : React : Node\n",
        "\n",
        "## DBMS used in CMSC 508\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column}\n",
        "\n",
        "### MySQL\n",
        "\n",
        "MySQL is a prominent open-source relational database management system that operates on a client-server model, making it a great choice for handling large-scale database applications and supporting multi-user environments.\n",
        "\n",
        "Deployment and Setup\n",
        ": Requires a separate server setup, involving a more complex installation process and server maintenance.\n",
        "\n",
        "Concurrent Access\n",
        ": Can handle multiple users and applications simultaneously, making it a better fit for web applications or systems with high concurrency requirements.\n",
        "\n",
        "Storage and Performance\n",
        ": Often better suited for large datasets and offers higher performance for complex queries, thanks to optimization features and more expansive indexing options.\n",
        "\n",
        ":::\n",
        "::: {.column}\n",
        "### SQLLite\n",
        "\n",
        "SQLite is a self-contained, serverless, and zero-configuration database engine commonly embedded into mobile and desktop applications for local storage and capable of handling smaller-scale database needs with ease.\n",
        "\n",
        "Deployment and Setup\n",
        ": Extremely lightweight and easy to set up, with no server to install or configure.\n",
        "\n",
        "Concurrent Access\n",
        ": Generally supports single-user systems better, and might encounter locks or bottlenecks with multiple concurrent accesses.\n",
        "\n",
        "Storage and Performance\n",
        ": Optimized for local storage with smaller databases, with a file-based storage system that might be less efficient for large datasets or complex queries.\n",
        "\n",
        ":::\n",
        "::::\n"
      ],
      "id": "2700bfee"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\jdleonard\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\cmsc427-yciDUe4a-py3.13\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}