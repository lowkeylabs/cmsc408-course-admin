# SQL - Stored Procedures

## SQL Procedures - Introduction

:::: {.columns}
::: {.column}
### What is a SQL Procedure?
- A SQL Procedure is a set of SQL statements that can be executed as a single unit.
- Procedures are used to encapsulate a series of SQL commands for reusability and ease of maintenance.
- CREATE PROCEDURE is a DDL statement and belongs in the DDL file.
:::
::: {.column}
![](./assets/SQL-Stored-Procedure.png){fig-align="center"}
:::
::::

## SQL Procedures - Motivation (1)
SQL procedures should be used in various situations to improve code organization, reusability, security, and performance. Here are some common scenarios when you should consider using SQL procedures:

:::: {.columns}
::: {.column}

1. **Code Reusability and Maintenance:** Procedures allow you to encapsulate a series of SQL statements into a single unit. This makes it easier to reuse the same logic across multiple parts of your application, reducing code duplication.

2. **Complex Queries:** When dealing with complex queries involving multiple tables, joins, conditions, or calculations, procedures can simplify the code and make it more manageable.

3. **Security:** Procedures can help enhance security by allowing you to control who has access to execute specific procedures rather than granting direct table access. This can be useful for enforcing security policies and limiting potential risks.

:::
::: {.column}

4. **Transaction Management:** Procedures can be used to wrap a series of SQL statements within a transaction, ensuring data integrity. This is crucial when you need to perform multiple database operations as a single unit, and all must succeed or fail together.

5. **Performance Optimization:** By using procedures, you can precompile and optimize SQL statements, which can improve query execution performance. This is particularly beneficial for frequently executed queries.

6. **Parameterized Queries:** Procedures can accept input parameters, making them versatile for handling various data scenarios without changing the underlying SQL code. This parameterization helps prevent SQL injection attacks and promotes code stability.

:::
::::

## SQL Procedures - Motivation (2)
SQL procedures should be used in various situations to improve code organization, reusability, security, and performance. Here are some common scenarios when you should consider using SQL procedures:

:::: {.columns}
::: {.column}

7. **Version Control and Maintenance:** Procedures provide a modular structure that simplifies version control and maintenance of database logic. Changes can be made to procedures without affecting the application code that calls them.

8. **Business Logic Separation:** Procedures allow you to separate business logic from application code. This can make your codebase more maintainable and facilitate collaboration between database developers and application developers.

:::
::: {.column}

9. **Scheduled Jobs:** Procedures can be scheduled to run at specific intervals using database scheduling mechanisms. This is useful for automating routine tasks, data cleanup, or generating reports.

10. **Audit Trails:** Procedures can be used to implement audit trails, recording changes made to the database for tracking and compliance purposes.

:::
::::

## SQL Procedures - CREATE PROCEDURE

:::: {.columns}
::: {.column}

### Syntax for Creating a Procedure

```sql
DELIMETER //
CREATE PROCEDURE procedure_name
    [parameter1 data_type, parameter2 data_type, ...]
AS
BEGIN
    -- SQL statements here
END //
DELIMETER ;
```
* Procedures are mini SQL programs.
* CREATE PROCEDURE is a DDL statement
* MySQL uses DELIMETER to separate procedure SQL from DDL SQL.
* Other DDL statements:
    - DROP PROCEDURE
    - SHOW PROCEDURE STATUS
    - ALTER PROCEDURE
:::
::: {.column}

### Example

```sql
CREATE PROCEDURE CalculateTotalPrice
    @ProductID INT,
    @Quantity INT
AS
BEGIN
    SELECT product_name, unit_price * @Quantity AS total_price
    FROM products
    WHERE product_id = @ProductID;
END;
```
* Procedures can accept arguments on INPUT and arguments for OUTPUT
* In the example above, the procedure accepts 2 arguments on input and returns a table.
* Procedures can contain multiple SQL statements. Statements executed in order and the results of one may feed the next.
* Procedures can contain WHILE LOOP and other control statements.
:::
::::

## SQL Procedures - Who might use them


:::: {.columns}
::: {.column}
### Roles That Typically Use Stored Procedures

1. **Database Administrators (DBAs):** DBAs use stored procedures for database maintenance, security, backup, and performance optimization.

2. **Application Developers:** Application developers use stored procedures to encapsulate database logic within applications for CRUD operations and business logic.

3. **Database Developers:** Database developers specialize in creating and optimizing database objects, including stored procedures.

4. **Data Analysts:** Data analysts may use stored procedures for ETL processes, data transformations, and reporting.

5. **System Administrators:** System administrators use stored procedures for scheduling and monitoring tasks, such as backups and maintenance.

:::
::: {.column}

### Roles That Typically Don't Use Stored Procedures

1. **Quality Assurance (QA) Testers:** QA testers focus on testing applications and typically do not create or manage stored procedures.

2. **Business Analysts:** Business analysts define business requirements and provide input but do not typically interact with stored procedures directly.

3. **End Users:** End users of applications or reporting tools usually have no direct involvement with the creation or execution of stored procedures.

:::
::::

## SQL Procedures - Summary

* Stored procedures are a handy tool for the tool belt.
* They're usually written to help with DB adminstration and maintenance.
* From a performance perspective, you don't want to include procedures in your data pipeline.
