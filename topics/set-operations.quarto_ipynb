{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "format:\n",
        "  revealjs:\n",
        "    include-in-header:\n",
        "    - text: <script src='https://toolness.github.io/p5.js-widget/p5-widget.js'></script>\n",
        "title: Set Operations\n",
        "---\n",
        "\n",
        "\n",
        "# Set Operations\n",
        "\n",
        "\n",
        "\n",
        "## Introduction to Set Theory and Relational Algebra\n",
        "\n",
        "\n",
        "Set theory is a fundamental concept in relational algebra, providing the basis for operations that manipulate relations. These operations enable combining and filtering data effectively in relational databases.\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "- Set theory deals with the mathematical concept of sets, collections of distinct elements.\n",
        "- Relational algebra applies set theory to relations (tables) in databases.\n",
        "- Common operations include union, intersection, difference, and Cartesian product.\n",
        "- These operations allow manipulation of data across multiple relations.\n",
        "- Set operations are performed on relations that have the same schema.\n",
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}\n",
        "[![](.//assets/codd_acm_article.png)](https://www.seas.upenn.edu/~zives/03f/cis550/codd.pdf)\n",
        ":::\n",
        "::::\n",
        "\n",
        "\n",
        "*Set theory is essential for understanding how relational algebra manipulates and combines relations.*\n",
        "\n",
        "<!-- -->"
      ],
      "id": "82ddbe7a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "import pandas as pd\n",
        "from tabulate import tabulate\n",
        "from IPython.display import display, Markdown, HTML\n",
        "\n",
        "\n",
        "def show_df( df, width=\"80%\" ):\n",
        "#   display(Markdown(df.to_markdown(index=False)))\n",
        "#   print(\"<center>\")\n",
        "#   print(tabulate(df, headers='keys', tablefmt='pretty', showindex=False))   \n",
        "#   print(\"</center>\")\n",
        "   html_table = df.drop_duplicates().to_html(index=False)\n",
        "\n",
        "   # Define the HTML with centered table and 75% width\n",
        "   html_content = f\"\"\"\n",
        "   <div style=\"text-align: center;\">\n",
        "      <div style=\"display: inline-block; width: {width};\">\n",
        "         {html_table}\n",
        "      </div>\n",
        "   </div>\n",
        "\"\"\"\n",
        "   display(HTML(html_content))\n",
        "\n",
        "\n",
        "d1 = {\n",
        "    'Course': ['CMSC301', 'CMSC408',  'CMSC408'],\n",
        "    'Term': ['Fall 2024','Fall 2024', 'Fall 2023'],\n",
        "}\n",
        "d2 = {\n",
        "    'Course': ['CMSC110', 'CMSC201',  'CMSC475', 'CMSC408'],\n",
        "    'Term': ['Fall 2024','Fall 2024', 'Fall 2023','Fall 2024'],\n",
        "}\n",
        "d3 = {\n",
        "   'Term': ['Fall 2022','Fall 2023','Fall 2024'],\n",
        "   'Term_code': ['202310','202410','202510']\n",
        "}\n",
        "\n",
        "df1 = pd.DataFrame( d1 )\n",
        "df2 = pd.DataFrame( d2 )\n",
        "df3 = pd.DataFrame( d3 )"
      ],
      "id": "efe43da9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Intersection Operation in Relational Algebra\n",
        "\n",
        "\n",
        "The intersection operation retrieves rows that are common to two relations. It is used to find data that appears in both relations, making it useful when comparing datasets or finding shared entries between relations.\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "**∩ - Intersection**\n",
        "\n",
        "- Intersection finds common tuples between two relations.\n",
        "- The result includes only those tuples that appear in both relations.\n",
        "- Denoted as Relation1 ∩ Relation2\n",
        "- It's a binary operation, meaning it operates on two relations.\n",
        "- Both relations must be *union-compatible*, meaning they have the same set of attributes and data types.\n",
        "- Intersection is often used in conjunction with other set-based operations like union and difference.\n",
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}"
      ],
      "id": "28c08480"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib_venn import venn2\n",
        "\n",
        "# Define the two sets\n",
        "set_A = {1, 2, 3, 4}\n",
        "set_B = {4, 5, 6, 7}\n",
        "\n",
        "# Create the Venn diagram with custom colors\n",
        "venn = venn2([set_A, set_B], set_labels=('Set A', 'Set B'))\n",
        "\n",
        "venn.get_patch_by_id('10').set_color('white')\n",
        "venn.get_patch_by_id('11').set_color('lightblue')\n",
        "venn.get_patch_by_id('01').set_color('white')\n",
        "\n",
        "# Set all patches to 'lightblue' color\n",
        "for subset in ('10', '01', '11'):\n",
        "    venn.get_patch_by_id(subset).set_edgecolor('black')  # Thin black borders\n",
        "    venn.get_patch_by_id(subset).set_linewidth(1.5)      # Adjust the border width\n",
        "\n",
        "\n",
        "# Remove the default labels for A and B\n",
        "venn.get_label_by_id('10').set_text('')\n",
        "venn.get_label_by_id('01').set_text('')\n",
        "venn.get_label_by_id('11').set_text('')\n",
        "\n",
        "# Make the background transparent\n",
        "plt.gca().set_facecolor('none')\n",
        "\n",
        "# Display the plot\n",
        "plt.title('A ∩ B')\n",
        "plt.show()"
      ],
      "id": "d6e0bc9f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**Examples**\n",
        "\n",
        "Given two relations *Students(ID,Name,Major)* and *Registered(ID,Name,Major)*,\n",
        "\n",
        "The following are valid examples of the $\\cap$ in unicode:\n",
        "\n",
        "1. Students ∩ Registered\n",
        "\n",
        "1. Courses ∩ OfferedCourses\n",
        "\n",
        "1. Employees ∩ Managers\n",
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "*Intersection is useful for finding commonality between two sets of data in relational databases.*\n",
        "\n",
        "\n",
        "\n",
        "## Properties of the Intersection Operator\n",
        "\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "**Definition**\n",
        "\n",
        "$$\n",
        "R_1 \\cap R_2 = { t \\mid t \\in R_1 \\text{ and } t \\in R_2 }\n",
        "$$\n",
        "\n",
        "- where $t$ is a row (tuple),\n",
        "- $R_1$ and $R_2$ are relations (tables) with the same attributes,\n",
        "- The intersection operation returns a new relation containing only the rows that are present in both $R_1$ and $R_2$,\n",
        "- The result consists of distinct rows that satisfy the condition of being in both relations.\n",
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}\n",
        "**Properties**\n",
        "\n",
        "- **Idempotent** – Applying the intersection of a relation with itself doesn't change the result:\n",
        "\n",
        "$$\n",
        "R \\cap R = R\n",
        "$$\n",
        "\n",
        "- **Commutative** – The order of relations in an intersection operation doesn't matter:\n",
        "\n",
        "$$\n",
        "R_1 \\cap R_2 = R_2 \\cap R_1\n",
        "$$\n",
        "\n",
        "- **Associative** – The grouping of intersection operations doesn't affect the result:\n",
        "\n",
        "$$\n",
        "(R_1 \\cap R_2) \\cap R_3 = R_1 \\cap (R_2 \\cap R_3)\n",
        "$$\n",
        "\n",
        "- **Intersection with an empty set** – The intersection of a relation with an empty set is the empty set:\n",
        "\n",
        "$$\n",
        "R \\cap \\emptyset = \\emptyset\n",
        "$$\n",
        "\n",
        "- **Intersection distributes over union** – The intersection of two relations distributes over their union:\n",
        "\n",
        "$$\n",
        "R_1 \\cap (R_2 \\cup R_3) = (R_1 \\cap R_2) \\cup (R_1 \\cap R_3)\n",
        "$$\n",
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "\n",
        "\n",
        "## Explanation of properties\n",
        "\n",
        "\n",
        "- **Idempotent**: Combining a relation with itself using intersection does not remove any rows, so the result remains the same.\n",
        "- **Commutative**: The order of the relations in the intersection operation does not affect the result.\n",
        "- **Associative**: You can group intersection operations in any way, and the result will be the same.\n",
        "- **Intersection with an empty set**: Intersecting with an empty relation results in an empty set because no rows can be in both the original relation and an empty set.\n",
        "- **Distributed**: Intersection distributes over union, meaning you can break down or combine intersections in a structured way over unions.\n",
        "\n",
        "\n",
        "\n",
        "## Intersection - ∩ - Example 1\n",
        "\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "Given *Courses1( Course,Term)*:"
      ],
      "id": "c72c0592"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "show_df(df1)"
      ],
      "id": "d112ab14",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "and *Courses2( Course,Term )*:"
      ],
      "id": "2ea014dc"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "show_df(df2)"
      ],
      "id": "7d4f8de0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}\n",
        "*Courses1* $\\cap$ *Courses2* returns:"
      ],
      "id": "3c054e6f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "new_df = pd.concat( [df1, df2] )\n",
        "new_df = pd.merge(df1, df2, how='inner')\n",
        "show_df( new_df )"
      ],
      "id": "4c526251",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "\n",
        "\n",
        "## Difference in Relational Algebra\n",
        "\n",
        "\n",
        "Difference in relational algebra subtracts one relation from another, returning the rows that are present in the first relation but not the second.\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "- The difference operation returns tuples that are in one relation but not in the other.\n",
        "- It is often used to filter out unwanted data from a larger dataset.\n",
        "- The relations must have the same schema for the difference operation to be valid.\n",
        "- This operation can help isolate unique data points in a relation.\n",
        "- The result is a relation that includes only the data exclusive to the first set.\n",
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}"
      ],
      "id": "8e2d4e40"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib_venn import venn2\n",
        "\n",
        "# Define the two sets\n",
        "set_A = {1, 2, 3, 4}\n",
        "set_B = {4, 5, 6, 7}\n",
        "\n",
        "# Create the Venn diagram with custom colors\n",
        "venn = venn2([set_A, set_B], set_labels=('Set A', 'Set B'))\n",
        "\n",
        "venn.get_patch_by_id('10').set_color('lightblue')\n",
        "venn.get_patch_by_id('11').set_color('white')\n",
        "venn.get_patch_by_id('01').set_color('white')\n",
        "\n",
        "# Set all patches to 'lightblue' color\n",
        "for subset in ('10', '01', '11'):\n",
        "    venn.get_patch_by_id(subset).set_edgecolor('black')  # Thin black borders\n",
        "    venn.get_patch_by_id(subset).set_linewidth(1.5)      # Adjust the border width\n",
        "\n",
        "\n",
        "# Remove the default labels for A and B\n",
        "venn.get_label_by_id('10').set_text('')\n",
        "venn.get_label_by_id('01').set_text('')\n",
        "venn.get_label_by_id('11').set_text('')\n",
        "\n",
        "# Make the background transparent\n",
        "plt.gca().set_facecolor('none')\n",
        "\n",
        "# Display the plot\n",
        "plt.title('A - B')\n",
        "plt.show()"
      ],
      "id": "0a639b02",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "*Difference is a powerful tool for excluding data from one relation that is present in another.*\n",
        "\n",
        "\n",
        "\n",
        "## Properties of the Difference Operator\n",
        "\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "**Definition**\n",
        "\n",
        "$$\n",
        "R_1 - R_2 = { t \\mid t \\in R_1 \\text{ and } t \\notin R_2 }\n",
        "$$\n",
        "\n",
        "- where $t$ is a row (tuple),\n",
        "- $R_1$ and $R_2$ are relations (tables) with the same attributes,\n",
        "- The difference operation returns a new relation containing only the rows that are in $R_1$ but not in $R_2$,\n",
        "- The result consists of distinct rows that exist in $R_1$ and are absent from $R_2$.\n",
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}\n",
        "**Properties**\n",
        "\n",
        "- **Non-commutative** – The order of relations in the difference operation matters:\n",
        "\n",
        "$$\n",
        "R_1 - R_2 \\neq R_2 - R_1\n",
        "$$\n",
        "\n",
        "- **Not associative** – Grouping difference operations affects the result:\n",
        "\n",
        "$$\n",
        "(R_1 - R_2) - R_3 \\neq R_1 - (R_2 - R_3)\n",
        "$$\n",
        "\n",
        "- **Difference with an empty set** – The difference between a relation and an empty set is the relation itself:\n",
        "\n",
        "$$\n",
        "R_1 - \\emptyset = R_1\n",
        "$$\n",
        "\n",
        "- **Difference with itself** – The difference between a relation and itself is the empty set:\n",
        "\n",
        "$$\n",
        "R_1 - R_1 = \\emptyset\n",
        "$$\n",
        "\n",
        "- **Distributive over intersection** – The difference operation distributes over intersection:\n",
        "\n",
        "$$\n",
        "R_1 - (R_2 \\cap R_3) = (R_1 - R_2) \\cap (R_1 - R_3)\n",
        "$$\n",
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "\n",
        "\n",
        "## Explanation of properties\n",
        "\n",
        "\n",
        "- **Non-commutative**: The order in which the relations are used in the difference matters because the result will include rows from $R_1$ that are not in $R_2$, but not vice versa.\n",
        "- **Not associative**: The grouping of relations in a difference operation affects the outcome since subtracting another relation later changes the rows that remain.\n",
        "- **Difference with an empty set**: Subtracting an empty set from a relation has no effect since there are no rows to remove.\n",
        "- **Difference with itself**: Subtracting a relation from itself results in an empty set, as no rows are left.\n",
        "- **Distributive over intersection**: Difference distributes over intersection, allowing you to apply the difference to both parts of the intersection separately and then take their intersection.\n",
        "\n",
        "\n",
        "\n",
        "## Difference - $-$ - Example 1\n",
        "\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "Given *Courses1( Course,Term)*:"
      ],
      "id": "6ead5fda"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "show_df(df1)"
      ],
      "id": "64ee9f27",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "and *Courses2( Course,Term )*:"
      ],
      "id": "782f6d00"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "show_df(df2)"
      ],
      "id": "e67cd27c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}\n",
        "*Courses1* $-$ *Courses2* returns:"
      ],
      "id": "eb75b788"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "difference = pd.merge(df1, df2, how='left', indicator=True)\n",
        "\n",
        "# Keep only the rows that are unique to df1\n",
        "df1_minus_df2 = difference[difference['_merge'] == 'left_only'].drop(columns=['_merge'])\n",
        "\n",
        "show_df( df1_minus_df2 )"
      ],
      "id": "1f2804e2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "## Difference - $-$ - Example 2\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "Given *Courses1( Course,Term)*:"
      ],
      "id": "dc829b0d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "show_df(df1)"
      ],
      "id": "0060183d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "and *Courses2( Course,Term )*:"
      ],
      "id": "78e1ecc6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "show_df(df2)"
      ],
      "id": "41463f40",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}\n",
        "*Courses2* $-$ *Courses1* returns:"
      ],
      "id": "b5a3639a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "difference = pd.merge(df2, df1, how='left', indicator=True)\n",
        "\n",
        "# Keep only the rows that are unique to df1\n",
        "df2_minus_df1 = difference[difference['_merge'] == 'left_only'].drop(columns=['_merge'])\n",
        "\n",
        "show_df( df2_minus_df1 )"
      ],
      "id": "2bf2bd66",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## Combining Relations Using Set Operations\n",
        "\n",
        "\n",
        "Set operations allow the combination of multiple relations in a variety of ways, depending on the desired outcome of the query.\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=98%}\n",
        "- Relational algebra supports various set operations like union, intersection, and difference.\n",
        "- These operations allow filtering and merging data across relations.\n",
        "- Set operations are only valid when the schemas of the involved relations match.\n",
        "- Use cases include combining multiple tables, finding common data, or filtering out specific records.\n",
        "- Understanding these operations is key to effective data manipulation in relational databases.\n",
        ":::\n",
        "::: {.column width=1%}\n",
        ":::\n",
        "::: {.column width=1%}\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "*Set operations provide flexible tools for combining and comparing datasets in relational databases.*\n",
        "\n",
        "\n",
        "\n",
        "## Set Operation Requirements and Considerations\n",
        "\n",
        "\n",
        "When performing set operations, it's essential to ensure that both relations have compatible schemas and understand how each operation behaves.\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=98%}\n",
        "- Set operations can only be performed on relations with identical schemas.\n",
        "- The number of attributes and their types must match for the operation to succeed.\n",
        "- Set operations can return large results, depending on the size of the input relations.\n",
        "- Performance considerations include the size of relations and efficiency of the operation.\n",
        "- Proper indexing can improve the speed of set operations in large databases.\n",
        ":::\n",
        "::: {.column width=1%}\n",
        ":::\n",
        "::: {.column width=1%}\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "*Understanding the requirements of set operations ensures successful and efficient data manipulation.*\n",
        "\n",
        "\n",
        "\n",
        "## Examples of Set Operations in Relational Queries\n",
        "\n",
        "\n",
        "Relational algebra operations like union, intersection, and difference can be directly applied in database queries to filter and combine data.\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=98%}\n",
        "- Example: Union of two employee tables to combine employee records from two departments.\n",
        "- Example: Intersection of student and graduate tables to find students who have graduated.\n",
        "- Example: Difference between a product catalog and inventory to find out-of-stock items.\n",
        "- Cartesian product used to combine customer and order tables for further analysis.\n",
        "- Practical queries often combine set operations with other relational algebra operations.\n",
        ":::\n",
        "::: {.column width=1%}\n",
        ":::\n",
        "::: {.column width=1%}\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "*Set operations are applied in real-world scenarios to efficiently manipulate and query data.*\n",
        "\n",
        "\n",
        "\n",
        "## Set Operations in Real-World Databases\n",
        "\n",
        "\n",
        "Set operations play a vital role in real-world databases, helping manage and analyze large datasets effectively.\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=98%}\n",
        "- Used to merge large datasets across departments or organizations.\n",
        "- Helpful in financial reporting, where records from different periods or regions are combined.\n",
        "- Set operations can aid in data cleaning by removing duplicates or irrelevant records.\n",
        "- They are fundamental in multi-relational databases where data is distributed across tables.\n",
        "- Often used in cloud environments for large-scale data analysis and processing.\n",
        ":::\n",
        "::: {.column width=1%}\n",
        ":::\n",
        "::: {.column width=1%}\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "*In practice, set operations streamline data integration and analysis across various industries.*\n",
        "\n",
        "\n",
        "\n",
        "## Summary of Set Operations in Relational Algebra\n",
        "\n",
        "\n",
        "Set operations, including union, intersection, difference, and Cartesian product, are key tools in relational algebra for manipulating and combining relations. They enable powerful queries that form the basis of relational database functionality.\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=98%}\n",
        "- Set theory provides the foundation for combining and filtering relations.\n",
        "- Intersection finds common records, while difference filters out data from one relation.\n",
        "- Cartesian product creates all possible combinations of tuples from two relations.\n",
        "- Union merges two relations, removing duplicates.\n",
        "- These operations are essential for querying and managing relational databases.\n",
        ":::\n",
        "::: {.column width=1%}\n",
        ":::\n",
        "::: {.column width=1%}\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "*Mastery of set operations in relational algebra allows for complex and efficient database queries.*\n"
      ],
      "id": "826ec529"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\jdleonard\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\cmsc427-yciDUe4a-py3.13\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}