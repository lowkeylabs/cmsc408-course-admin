
# Entities, attributes and relationships<br/>and the ER Diagram

## Key components of an ER model

Entities
: These represent real-world objects, concepts, or things that have data stored about them. Each entity is depicted as a rectangle in the ER diagram.

Attributes
: Attributes are properties or characteristics that describe the entities. For example, if you're modeling a *Customer* entity, attributes could include *CustomerID,* *Name,* *Email,* etc.

Relationships
: Relationships illustrate how entities are related to each other. Relationships can be one-to-one, one-to-many, or many-to-many, and they help define how data is interconnected.

## Example

Imagine a city full of buildings.

Each building can can be located with an address,
city, and state. A building consists of one or more rooms.

Rooms have room_numbers and occupants.

**Identify the entities, attributes and relationships**

## Chen notation

:::: {.columns}
::: {.column width="40%"}

```{dot}
//| echo: true
//| eval: false
graph ER {
	layout=neato;
  scale=1.1;
	node [shape=box]; building; room;
	node [shape=ellipse]; address, city, state, occupant, room_number
	node [shape=diamond,style=filled,color=lightgrey]; has
	
	building -- has [label="1",len=1.00]
	has -- room [label="n",len=1.00]
	
	building -- address
	building -- city
	building -- state
  room -- room_number
	room -- occupant
}
```
:::
::: {.column width="59%"}
```{dot}
//| echo: false
//| eval: true
//| fig-width: 500px
//| fig-height: 240px
graph {
	layout=neato;
  scale=1.1;
	node [shape=box,fontsize=12]; building; room;
	node [shape=ellipse,fontsize=12]; address, city, state, occupant, room_number
	node [shape=diamond,fontsize=12,style=filled,color=lightgrey]; has
	
	building -- has [label="1",len=1.00]
	has -- room [label="n",len=1.00]
	
	building -- address
	building -- city
	building -- state
  room -- room_number
	room -- occupant
}
```
:::
::::
[Link to graphviz on-line editor](https://dreampuf.github.io/GraphvizOnline/)


## Crow's Foot notation

:::: {.columns}

::: {.column}

```{mermaid}
%%| echo: true
%%| eval: false
erDiagram
BUILDING ||--|{ ROOM : contains

BUILDING{
  string address
  string city
  string state
}

ROOM {
  string room_number
  string occupants
}
```

:::

::: {.column}

```{mermaid}
%%| echo: false
%%| eval: true
erDiagram
BUILDING ||--|{ ROOM : contains

BUILDING{
  string address
  string city
  string state
}

ROOM {
  string room_number
  string occupant
}
```

:::

::::

[Link to mermaid live](https://mermaid.live/edit)

## Cardinality

Cardinality describes the number of instances of one entity that can be associated with the number of instances of another entity through a relationship. It defines the multiplicity of the relationship.

There are three main types of cardinality:

One-to-One (1:1)
: In a one-to-one relationship, each instance of one entity is related to only one instance of another entity, and vice versa.

One-to-Many (1:N)
: In a one-to-many relationship, each instance of one entity can be related to multiple instances of another entity, but each instance of the other entity is related to only one instance of the first entity.

Many-to-Many (N:M)
: In a many-to-many relationship, each instance of one entity can be related to multiple instances of another entity, and vice versa.

## Participation

Participation refers to whether every instance of an entity must participate in a relationship or if participation is optional. It indicates whether an instance of an entity is required to have a corresponding related instance in the related entity.

There are two main types of participation:

Total Participation (Existence Dependency)
: In total participation, every instance of the participating entity must be related to at least one instance of the related entity. 

Partial Participation
: In partial participation, an instance of the participating entity may or may not be related to an instance of the related entity. 

## Example

Imagine a library management system that keeps track of books, authors, and publishers. 

Each book in the system is identified by its International Standard Book Number (ISBN), which serves as its unique identifier. Books are associated with authors and publishers.

Authors are individuals who write books. Each author is identified by a unique AuthorID and has a name associated with them.  Authors have written at least one book but can write as many as they are able.

Publishers are entities responsible for releasing books to the public. Each publisher has a unique PublisherID, a name, and a home city. Publishers have at least one book in their catalog and can publish as many as they are able.

**Prepare ER diagrams for this system using both Chen and Crow's foot notation.**

[Link to graphviz on-line editor](https://dreampuf.github.io/GraphvizOnline/)

[Link to mermaid live](https://mermaid.live/edit)

