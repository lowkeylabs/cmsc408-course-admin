{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: Intro to SQL\n",
        "---\n",
        "\n",
        "# Intro to SQL\n",
        "\n",
        "## Interacting with the database\n",
        "\n",
        "A **DBMS** is software that manages databases, providing an interface between users, applications, and the database. The DBMS handles the internal mechanics of data storage, querying, transaction management, and access control. When users or applications issue commands, the DBMS processes these commands and ensures that the database remains consistent, efficient, and secure.\n",
        "\n",
        "Interacting with a **Database Management System (DBMS)** and a **database** involves several layers of operations, each designed to handle a specific aspect of how data is stored, managed, secured, and retrieved.\n",
        "\n",
        "*SQL* (structured query language) is the computer language we use to interact with the DBMS.\n",
        "\n",
        "## SQL (Structured Query Language )\n",
        "\n",
        "**SQL (Structured Query Language)**: is a standardized language used for managing and querying relational databases. It provides commands for defining, manipulating, controlling, and retrieving data in databases.\n",
        "\n",
        "- **ANSI SQL Standard**: ANSI (American National Standards Institute) defines the core SQL standard, ensuring a common foundation for relational database operations across different systems, though specific features may vary by vendor.\n",
        "The most recent version of the SQL standard is SQL:2023, formally adopted in June 2023.\n",
        "\n",
        "- **SQL Dialects by Vendor**: While adhering to ANSI SQL, many database vendors (like **MySQL**, **PostgreSQL**, **Oracle**, **SQL Server**) extend SQL with proprietary features (e.g., Oracle’s PL/SQL, Microsoft’s T-SQL) to support additional functionalities unique to their systems.\n",
        "\n",
        "\n",
        "## SQL command groups\n",
        "\n",
        "SQL commands are grouped based on what they do to/for the DBMS.  We sometimes refer to these groups as separate *languages*: **DDL**, **DML**, **DCL**, and **TCL**.\n",
        "\n",
        "* **Design and Structure (DDL)**: When building a database, DDL is the first interaction, defining how data will be stored and structured. This foundational step ensures the database can efficiently support future operations.\n",
        "\n",
        "* **Manipulating and Retrieving Data (DML)**: The core daily interactions with the database happen through DML. Whether adding new entries, retrieving data, or updating records, these operations are what end-users experience.\n",
        "\n",
        "* **Security and Permissions (DCL)**: Modern databases are often accessed by multiple users and applications. Ensuring that data access is controlled and secure is essential, and DCL ensures that only the right users have the appropriate access levels.\n",
        "\n",
        "* **Maintaining Data Integrity (TCL)**: In multi-user environments or where transactions involve complex steps (e.g., financial transactions, inventory updates), TCL ensures that the database remains in a consistent state even when failures or conflicts occur.\n",
        "\n",
        "## DDL (Data Definition Language)\n",
        "\n",
        "- **Purpose**: Defines the structure and organization of the database.\n",
        "- **Role**: DDL commands interact directly with the **DBMS** to create, modify, or delete database objects such as tables, indexes, and schemas.\n",
        "- **Example**: When creating a new table, the **DBMS** allocates the necessary storage and manages the metadata that defines the table structure. DDL commands ensure that the database schema evolves as the application grows.\n",
        "- **Use Cases**:\n",
        "  - Creating a new table to store user data.\n",
        "  - Altering the structure of an existing table to accommodate new fields.\n",
        "\n",
        "## DDL (Data Definition Language)\n",
        "\n",
        "Key DDL commands include:\n",
        "\n",
        "1. **`CREATE`**: Used to create new database objects like tables, indexes, views, or databases.\n",
        "2. **`ALTER`**: Used to modify the structure of an existing database object (e.g., adding or removing columns in a table).\n",
        "3. **`DROP`**: Used to delete database objects like tables, indexes, or entire databases.\n",
        "4. **`TRUNCATE`**: Removes all records from a table, but keeps the table structure intact.\n",
        "5. **`RENAME`**: Used to rename database objects.\n",
        "\n",
        "DDL commands define and change the structure or schema of a database, unlike DML, which focuses on manipulating the data within those structures.\n",
        "\n",
        "## DDL (Data Definition Language)\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column}\n",
        "* DDL compiler generates a set of tables stored in a data dictionary\n",
        "* Data dictionary contains metadata about:\n",
        "    - Database tables, fields and data types\n",
        "    - Primary and foreign keys\n",
        "    - Data integrity constrants\n",
        "    - Referential integrity\n",
        "    - Access and authorization rules\n",
        ":::\n",
        "::: {.column}\n",
        "### Example\n",
        "\n",
        "```{sql}\n",
        "CREATE TABLE person (\n",
        "    person_id INT PRIMARY KEY,\n",
        "    person_first_name VARCHAR(50),\n",
        "    person_last_name VARCHAR(50),\n",
        "    person_city VARCHAR(50)\n",
        ");\n",
        "\n",
        "```\n",
        "\n",
        "### Notes\n",
        "\n",
        "1. Fields are strongly typed,\n",
        "1. INT, VARCHAR(width), (lots more!)\n",
        "1. Additional attributed can be defined:\n",
        "    * PRIMARY KEY, FOREIGN KEY, etc.\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        "\n",
        "## DML (Data Manipulation Language)\n",
        "\n",
        "- **Purpose**: Manages the actual data within the database.\n",
        "- **Role**: DML commands interact with the **DB** to insert, retrieve, update, and delete data. The **DBMS** processes these requests and ensures the data is accessed efficiently and accurately.\n",
        "- **Example**: When querying data (e.g., `SELECT`), the **DBMS** retrieves the requested information from the database, handles the query optimizations, and returns results to the user or application.\n",
        "- **Use Cases**:\n",
        "  - Retrieving customer data for an e-commerce application.\n",
        "  - Inserting new product information into a database.\n",
        "\n",
        "\n",
        "## DCL (Data Control Language)\n",
        "\n",
        "- **Purpose**: Controls access to the data within the database.\n",
        "- **Role**: DCL commands interact with the **DBMS** to manage user permissions and security. This ensures that only authorized users can access or modify specific parts of the database.\n",
        "- **Example**: Granting access to a developer to only read the data while restricting their ability to modify or delete it.\n",
        "- **Use Cases**:\n",
        "  - Granting access to specific tables for an application.\n",
        "  - Revoking permissions from users who should no longer access the database.\n",
        "\n",
        "## TCL (Transaction Control Language)\n",
        "\n",
        "- **Purpose**: Manages and controls database transactions.\n",
        "- **Role**: TCL commands work closely with the **DBMS** to ensure that changes made to the database maintain **ACID (Atomicity, Consistency, Isolation, Durability)** properties. This ensures that transactions are processed reliably.\n",
        "- **Example**: When performing a `COMMIT` after multiple `INSERT` operations, the **DBMS** makes the changes permanent. If any part of the transaction fails, a `ROLLBACK` can undo all the changes to ensure data integrity.\n",
        "- **Use Cases**:\n",
        "  - Performing multiple updates to an inventory system and committing them only when all changes are successfully made.\n",
        "  - Rolling back a transaction if a bank transfer fails midway, ensuring no partial changes occur.\n",
        "\n",
        "## SQL Summary\n",
        "\n",
        "SQL is the overarching language for interacting with the relational database management system.\n",
        "\n",
        "SQL commands are organized into *languages* that play a distinct roles in the overall functioning of the DBMS. Together, they allow the applications programmer to:\n",
        "\n",
        "- **Define the structure** (DDL),\n",
        "- **Manipulate the data** (DML),\n",
        "- **Secure the database** (DCL), and\n",
        "- **Ensure reliable transactions** (TCL).\n",
        "\n",
        "By interacting with these layers, the DBMS provides a seamless, powerful way to manage data efficiently, ensuring that applications can scale, users can access information securely, and data integrity is maintained across transactions.\n"
      ],
      "id": "64975e32"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\jdleonard\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\cmsc427-yciDUe4a-py3.13\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}