<!-- # SQL Subqueries -->

## Subqueries

```{python}
#| echo: false

from helpers import create_database_engine, run_sql_and_return_df, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file,show_sql_and_results

# Load these variables from .env file.
config_map = {
  'user': "CMSC408_USER",
  'password': "CMSC408_PASSWORD",
  'host': "CMSC408_HOST",
  'database': "CMSC408_DB_NAME"
}

cnx,config = create_db_wrapper( config_map )
default_widths = [54,1,45]

```

:::: {.columns}
::: {.column}
A subquery is a query nested inside another query, often used to filter, compare, or transform data.

**Purpose**: Subqueries simplify complex queries by breaking them into smaller, manageable parts and allow reuse of query logic.

**Types**: Single-row, multi-row, and correlated subqueries, each used for different types of comparisons or conditions.

**Usage**: Can appear in `SELECT`, `WHERE`, `FROM`, and other clauses, making them versatile in SQL operations. 
:::
::: {.column}
### Single-row example

Find employees with greater than average salary.
```{.sql}
SELECT name
FROM employees
WHERE salary > (SELECT AVG(salary) FROM employees);
```
<p>&nbsp;</p>
### Multi-row example
Find employees from small departments (<5 employees)
```{.sql}
SELECT name
FROM employees
WHERE department_id IN (SELECT department_id
                        FROM employees
                        GROUP BY department_id
                        HAVING COUNT(*) < 5);
```
:::
::::

## Sample data - employees table from HR database
```{python}
#| output: asis
filename = "./assets/subqueries.sql"
messages, errors = execute_ddl_from_file(filename,cnx)
if errors:
	print(f"""## Error loading {filename}
{"\n".join(errors)}

## Sample data - employees table from HR database

""")
```
First 20 records from `employees` table in your `sp25_<eid>_hr` database.

::: {style="font-size: 0.5em;"}
```{python}
run_sql_and_return_html( cnx, f"""
SELECT
  *
FROM
  employees
LIMIT
  20
""")
```
:::

## Subquery in the WHERE clause

*List employees with salary greater than average salary.*

```{python}
sql = """SELECT
  last_name,
  salary
FROM
  employees
WHERE
  salary > (select avg(salary) from employees)
ORDER BY
  salary desc
LIMIT 15
"""
show_sql_and_results( cnx,sql,widths=default_widths )

```

## Subquery in the SELECT clause

*List employees with salary greater than average salary.*

```{python}
sql = """SELECT
  last_name,
  salary,
  (select avg(salary) 
   from employees
  ) as "Avg Salary"
FROM
  employees
WHERE
  salary > (select avg(salary) from employees)
ORDER BY
  salary desc
LIMIT 15
"""
show_sql_and_results( cnx,sql,widths=default_widths )
```

Same query as before, with a single-row select included in the SELECT statement.


## Subquery in the FROM clause

*List employees with salary greater than average salary.*

```{python}
sql = """SELECT
  *
FROM (
  SELECT
    department_id,
    SUM(salary) AS total_salary
  FROM
    employees
  GROUP BY department_id
  ) as junk_table
"""
show_sql_and_results( cnx,sql,widths=default_widths )
```

* SELECT statements return tables that can be used for additional queries.

* In the example above we create a new tables named `junk_table` that returns two
columns: `department_id` and `total_salary`


## Single-value subqueries

*Find employees hired before the earliest hire date in the Sales department.*

The *inner query* or *subquery* returns a single value - the earliest hire date of employees from department 100.  The *outer query* or *main query* uses this value in a comparison with *hire_data*

```{python}
sql = """
SELECT last_name
FROM employees
WHERE hire_date < (
  SELECT MIN(hire_date)
  FROM employees
  WHERE department_id=100
  );
"""
show_sql_and_results( cnx,sql,widths=default_widths )
```

## Multi-value subqueries

List the employees in large departments (this with more than 5 employees).

The *inner query* returns a list of department ids.  The *outer query* uses the `IN` operator to test of `department_id` is in the returned list.

```{python}
sql = """
SELECT last_name
FROM employees
WHERE department_id IN (SELECT department_id
                        FROM employees
                        GROUP BY department_id
                        HAVING COUNT(*) > 5);
"""
show_sql_and_results( cnx,sql,widths=default_widths )
```

## Correlated subqueries

*List employees earning more than the average salary in their department.*

The *inner query* returns the average salary for the department that matches
the department id of the employee in the outer query.

You can also get the same list by using a *join* in the `FROM` clause.

```{python}
sql = """
SELECT last_name, salary
FROM employees AS e1
WHERE salary > (SELECT AVG(salary)
                FROM employees AS e2
                WHERE e1.department_id = e2.department_id)
ORDER BY last_name
"""
show_sql_and_results( cnx,sql,widths=default_widths )
```

## Subquery as a virtual table

*List employees earning more than the average salary in their department.*

Here is the example as before, joining a subquery.

```{python}
sql = """
SELECT last_name, salary
FROM 
  employees e1 
    left join (SELECT department_id,AVG(salary) as avg_salary
                FROM employees
                group by department_id) e2
        on (e1.department_id=e2.department_id)
WHERE salary > avg_salary
ORDER BY last_name
"""
show_sql_and_results( cnx,sql,widths=[70,1,29] )
```

## Nested subqueries

*List employees who earn more than the average salary in departments with an average salary above $7,000 per month.*

```{python}
sql = """
SELECT last_name
FROM employees
WHERE salary > (SELECT AVG(salary)
                FROM employees
                WHERE department_id IN (SELECT department_id
                                        FROM employees
                                        GROUP BY department_id
                                        HAVING AVG(salary) > 7000));
"""
show_sql_and_results( cnx,sql,widths=[70,1,29] )
```
