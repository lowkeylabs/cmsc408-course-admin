<!-- # Databases and Database Management Systems -->

## A database ecosystem

:::: {.columns}

::: {.column}
*A heck of a lot more than just data!*

* Users and their needs
* Storage manager
* Query manager
* Physical storage
* Ways to connect

### Designing a database

Good design requires that we develop a better understanding
of the database itself, so that we can more smoothly translate
the conceptual and logical designs into a physical design.

The choice of database and DBMS may constrain or shape
our final design.

:::
::: {.column}
![](assets/dbms-internals.png){width=80%}
:::
::::

## Users and their needs

End user
: Uses application interfaces to access database

Application programmer
: Develops application interfaces (e.g., Web, API, mobile)

Business Analyst
: Uses query tools to directly access the data base (e.g. statistical business analyst)

Database Administrator (DBA)
: Designs logical and physical schemas
: Handles security and authorization
: Oversees data availability, crash recovery, software updates
: Monitors performance and tunes database as needs evolve
: Manages users and access control

## Storage manager

**Storage manager**

* a program that provides the interface between the low-level data stored in the database and the application programs and queries submitted to the system.

**Responsible for**

* Interaction with the file manager
* Efficient storing, retrieving and updating of data

**Considerations**

* Types of storage access
* Types of file organization
* Types of indexing and hashing
* Types of authorization and access control
* Data integritity

## Query manager

:::: {.columns}

::: {.column}
*Lots going on in between request and response!*

* REQUEST (query)
  - query parser
  - relational algebraic evaluationr
  - optimizer
  - planner (detailed code)
  - evaluator
* RESPONSE (query output)
:::
::: {.column}
![](assets/query-manager.png){width=80%}
:::
::::

## Transaction example

A **transaction** is a collection of operations that performs a single logical function in a database application

**Transaction-manager** ensures that the database remains in a consistent (correct) state despite system failures (e.g., power failures and operating system crashes) and transaction failures.

**Concurrency-control manager** controls the interaction among the concurrent transactions, to ensure the consistency of the database. 

![](assets/transaction-example.png){width=60% fig-align="center"}

## ACID properties

Atomicity
: Either all operations of the transaction are properly reflected in the database or none are

Consistency
:  Execution of a transaction in isolation preserves the consistency of the database

Isolation
:  Although multiple transactions may execute concurrently, each transaction must be unaware of other concurrently executing transactions.  *For every pair of transactions Ti and Tj, it appears to Ti that either Tj, finished execution before Ti started, or Tj started execution after Ti finished*

Durability
:  After a transaction completes successfully, the changes it has made to the database persist, even if there are system failures


## Accessing the DBMS

Using a command line
: SSH into server to script creation and population of the databases.
: Using a *connector*

Using an API
: ODBC, REST, graphQL or other approaches to manipulate aspects of the data base.

Using PHPMyAdmin
: Usually through a web browser to manage, monitor and tune the overall system.

Using a PHP full stack
: To run the application and use the database.
: * LAMP  Linux : Apache : MySQL : PHP/Perl/Python

Using NodeJS full stack
: To run the application and use the data base
: * MEAN  Mongo/MySQL : Express : Angular : Node
: * MERN  Mondo/MySQL : Express : React : Node

## DBMS used in CMSC 408

:::: {.columns}
::: {.column}

### MySQL

MySQL is a prominent open-source relational database management system that operates on a client-server model, making it a great choice for handling large-scale database applications and supporting multi-user environments.

Deployment and Setup
: Requires a separate server setup, involving a more complex installation process and server maintenance.

Concurrent Access
: Can handle multiple users and applications simultaneously, making it a better fit for web applications or systems with high concurrency requirements.

Storage and Performance
: Often better suited for large datasets and offers higher performance for complex queries, thanks to optimization features and more expansive indexing options.

:::
::: {.column}
### SQLLite

SQLite is a self-contained, serverless, and zero-configuration database engine commonly embedded into mobile and desktop applications for local storage and capable of handling smaller-scale database needs with ease.

Deployment and Setup
: Extremely lightweight and easy to set up, with no server to install or configure.

Concurrent Access
: Generally supports single-user systems better, and might encounter locks or bottlenecks with multiple concurrent accesses.

Storage and Performance
: Optimized for local storage with smaller databases, with a file-based storage system that might be less efficient for large datasets or complex queries.

:::
::::

