{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "format:\n",
        "  revealjs:\n",
        "    include-in-header:\n",
        "    - text: <script src='https://toolness.github.io/p5.js-widget/p5-widget.js'></script>\n",
        "title: Basic Operations\n",
        "---\n",
        "\n",
        "\n",
        "# Basic Operations\n",
        "\n",
        "\n",
        "\n",
        "## Introduction to Relational Algebra\n",
        "\n",
        "\n",
        "Relational algebra is a formal system for manipulating relations, foundational for querying relational databases. This section introduces the core principles and significance of relational algebra in database systems.\n",
        "\n",
        "```{=html}\n",
        "<style>\n",
        ".guide-block-right .quarto-float-fig {\n",
        "  float: right;\n",
        "  margin-left: 15px;\n",
        "  margin-bottom: 15px;\n",
        "}\n",
        "</style>\n",
        "```\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "- Relational algebra is a procedural query language.\n",
        "- It provides the formal foundation for relational database operations.\n",
        "- Operations in relational algebra manipulate sets of tuples.\n",
        "- The basic operations include ***selection***, ***projection***, and ***union***.\n",
        "- Understanding relational algebra is crucial for effective query optimization.\n",
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}\n",
        "![](./assets/relational-algebra-overview.jpg){fig-align=\"center\" width=25% .lightbox .quarto-float-fig}\n",
        ":::\n",
        "::::\n",
        "\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "*Relational algebra underpins the structure and functionality of modern relational databases.*"
      ],
      "id": "a8f05914"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "import pandas as pd\n",
        "from tabulate import tabulate\n",
        "from IPython.display import display, Markdown, HTML\n",
        "\n",
        "# Define the DataFrame\n",
        "data = {\n",
        "    'ID': [1, 2, 3, 4, 5],\n",
        "    'Course': ['CMSC301', 'CMSC408', 'CMSC445', 'CMSC475', 'CMSC408'],\n",
        "    'Term': ['Fall 2024','Fall 2024','Fall 2024','Fall 2024','Fall 2023'],\n",
        "    'Enrl': [220, 175, 37, 128, 125]\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "def select_rows(df, column, value):\n",
        "    # Filter the DataFrame based on the given column and value\n",
        "    return df[df[column] == value]\n",
        "\n",
        "def show_df( df, width=\"80%\" ):\n",
        "#   display(Markdown(df.to_markdown(index=False)))\n",
        "#   print(\"<center>\")\n",
        "#   print(tabulate(df, headers='keys', tablefmt='pretty', showindex=False))   \n",
        "#   print(\"</center>\")\n",
        "   html_table = df.drop_duplicates().to_html(index=False)\n",
        "\n",
        "   # Define the HTML with centered table and 75% width\n",
        "   html_content = f\"\"\"\n",
        "   <div style=\"text-align: center;\">\n",
        "      <div style=\"display: inline-block; width: {width};\">\n",
        "         {html_table}\n",
        "      </div>\n",
        "   </div>\n",
        "\"\"\"\n",
        "   display(HTML(html_content))"
      ],
      "id": "05c12ccc",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Selection Operation in Relational Algebra\n",
        "\n",
        "\n",
        "The selection operation retrieves rows from a relation that meet specified conditions. It allows narrowing down data based on predicates, forming a key part of querying in relational databases.\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "**σ - Selection (sigma)**\n",
        "\n",
        "- Selection filters rows based on a condition (predicate).\n",
        "- The result includes only those tuples that satisfy the predicate.\n",
        "- Denoted as σ(condition)(Relation)\n",
        "- It's a unary operation, meaning it operates on a single relation.\n",
        "- The result of a selection can be used as input into subsequent operations.\n",
        "- Selection is often used in conjunction with other operations like projection.\n",
        "- *condition* can contain any relational operator (e.g., =, \\<, >=, etc.)\n",
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}\n",
        "**Unicode examples**\n",
        "\n",
        "Below are examples of what these statement will look like on the Canvas quiz.\n",
        "\n",
        "1. σ(ID=3)(Courses)\n",
        "\n",
        "1. σ(Course='CMSC408')(Courses)\n",
        "\n",
        "1. σ(Enrl\\<=100)(Courses)\n",
        ":::\n",
        "::::\n",
        "\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "\n",
        "\n",
        "## Properties of the selection operator\n",
        "\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "**Definition**\n",
        "\n",
        "$$\n",
        "\\sigma_{\\rho}(R) = { t \\mid t \\in R \\text{ and } \\rho(t) == \\text{true} }\n",
        "$$\n",
        "\n",
        "- where $t$ is a row in $R$,\n",
        "- $\\rho$ (the *predicate*) is a boolean expression that evaluates true or false for all rows in $R$,\n",
        "- $\\rho$ consists of one or more *terms* connected by $\\land$(and), $\\lor$(or), $\\neg$(not) function.\n",
        "- *Terms* in $\\rho$ are simple relational expressions evaluated using $=$, $\\ne$, $\\<$, $>$, $\\le$, $\\ge$.\n",
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}\n",
        "**Properties**\n",
        "\n",
        "- *Idempotent* - can be applied multiple times without side effects:\n",
        "\n",
        "$$\n",
        "\\sigma_{A}(R) = \\sigma_{A} ( \\sigma_{A}(R) )\n",
        "$$\n",
        "\n",
        "- *Commutative* - the order of application doesn't matter:\n",
        "\n",
        "$$\n",
        "\\sigma_{A}( \\sigma_{B}(R) ) = \\sigma_{B}( \\sigma_{A}(R) )\n",
        "$$\n",
        "\n",
        "- *Distributed* - operations can be subdivided and combined\n",
        "\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\sigma_{A \\land B}( R ) &= \\sigma_{A}(R) \\cap \\sigma_{B}(R) \\\n",
        "&= \\sigma_{A}( \\sigma_{B}(R) ) = \\sigma_{B}( \\sigma_{A}(R) ) \\\n",
        "\\sigma_{A \\lor B}( R ) &= \\sigma_{A}(R) \\cup \\sigma_{B}(R)\n",
        "\\end{aligned}\n",
        "$$\n",
        ":::\n",
        "::::\n",
        "\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "\n",
        "\n",
        "## Selection - σ - Example 1\n",
        "\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "Given the *Courses(ID,Course,Term,Enrl)* below:"
      ],
      "id": "f852d967"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "show_df( df )"
      ],
      "id": "7b67f880",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}\n",
        "σ(ID=3)(Courses) returns:"
      ],
      "id": "b9cc4d02"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "new_df = select_rows(df,\"ID\",3 )\n",
        "show_df( new_df )"
      ],
      "id": "b45cdc14",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::::\n",
        "\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "\n",
        "\n",
        "## Selection - σ - Example 2\n",
        "\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "Given the *Courses(ID,Course,Term,Enrl)* below:"
      ],
      "id": "423c6deb"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "show_df(df)"
      ],
      "id": "ae8fdb5a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}\n",
        "σ(Course='CMSC408')(Courses) returns:"
      ],
      "id": "46c383c3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "new_df = select_rows(df,\"Course\",\"CMSC408\" )\n",
        "show_df( new_df )"
      ],
      "id": "cae67142",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "#\n",
        "\n",
        "## Selection - σ - Example 3\n",
        "\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "Given the *Courses(ID,Course,Term,Enrl)* below:"
      ],
      "id": "dd83b0d5"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "show_df(df)"
      ],
      "id": "71eb9024",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}\n",
        "σ(Enrl\\<=100)(Courses) returns:"
      ],
      "id": "97ff77a9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "new_df = df[ df[\"Enrl\"]<=100 ]\n",
        "show_df( new_df )"
      ],
      "id": "199c1efc",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::::\n",
        "\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "\n",
        "\n",
        "## Projection Operation in Relational Algebra\n",
        "\n",
        "\n",
        "The projection operation retrieves specific columns from a relation. It enables focusing on certain attributes while discarding others, making it a key operation in relational queries.\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "**Π - Projection operator**\n",
        "\n",
        "- Projection reduces the relation to specific columns (attributes).\n",
        "- Denoted as Π(attribute1, attribute2,...)(Relation).\n",
        "- It's used to eliminate unnecessary or redundant data.\n",
        "- Like selection, projection is a unary operation.\n",
        "- Projection also drops duplicate records (SQL doesn't!)!\n",
        "- Projection can be combined with other operations for complex queries.\n",
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}\n",
        "**Examples**\n",
        "\n",
        "Given a relation *Courses(ID,Course,Term,Enrl)*, the following are valid unicode examples of projection:\n",
        "\n",
        "1. Π(ID,Course)(Courses):\n",
        "\n",
        "1. Π(Course)(Courses):\n",
        "\n",
        "1. Π(Term)(Courses):\n",
        "\n",
        "1. Π(Term,ID)(Courses):\n",
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "*Projection helps streamline query results by focusing on relevant attributes.*\n",
        "\n",
        "\n",
        "\n",
        "## Definition of projection\n",
        "\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "**Definition**\n",
        "$$\n",
        "\\pi_{A_1, A_2, \\dots, A_n}(R) = { t\\[A_1, A_2, \\dots, A_n\\] \\mid t \\in R }\n",
        "$$\n",
        "\n",
        "- where $t$ is a row in $R$,\n",
        "- $A_1, A_2, \\dots, A_n$ are the attributes (columns) of relation (R),\n",
        "- The projection operator returns a new relation containing only the specified attributes $A_1, A_2, \\dots, A_n$ from $R$,\n",
        "- The resulting relation may contain duplicate rows, which are usually removed in standard relational algebra (i.e., it becomes a set rather than a multiset).\n",
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}\n",
        "***Explanation***\n",
        "\n",
        "- The projection operator $\\pi$ selects certain columns (attributes) from the relation $R$, discarding the others.\n",
        "- It operates by returning only the specified columns for each tuple (row) in $R$, effectively creating a \"vertical slice\" of the relation.\n",
        "- Duplicate tuples in the result are eliminated to ensure the output is a valid set.\n",
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "\n",
        "\n",
        "## Properties of projection\n",
        "\n",
        "\n",
        "- **Idempotent** – Projection can be applied multiple times without side effects:\n",
        "\n",
        "$$\n",
        "\\pi_{A_1, A_2, \\dots, A_n}( \\pi_{A_1, A_2, \\dots, A_n}(R) ) = \\pi_{A_1, A_2, \\dots, A_n}(R)\n",
        "$$\n",
        "\n",
        "- **Commutative** – The order of projection on overlapping sets of attributes doesn't matter:\n",
        "\n",
        "$$\n",
        "\\pi_{A_1, A_2}( \\pi_{A_2, A_3}(R) ) = \\pi_{A_2}( \\pi_{A_1, A_3}(R) )\n",
        "$$\n",
        "\n",
        "(if $A_1$, $A_2$, and $A_3$ are overlapping or compatible)\n",
        "\n",
        "- **Non-distributive** – Projection does **not** distribute over selection, but it interacts in specific ways:\n",
        "\n",
        "  - **Projection over selection** (you can select first, then project):\n",
        "\n",
        "  $$\n",
        "  \\pi_{A_1, A_2}( \\sigma_{B}(R) ) = \\pi_{A_1, A_2}(R) \\quad \\text{if } B \\text{ involves only attributes } A_1, A_2\n",
        "  $$\n",
        "\n",
        "  - **Selection over projection** (you cannot project first if selection involves non-projected attributes):\n",
        "\n",
        "  $$\n",
        "  \\sigma_{B}( \\pi_{A_1, A_2}(R) ) \\quad \\text{undefined if } B \\text{ involves attributes not in } A_1, A_2\n",
        "  $$\n",
        "\n",
        "\n",
        "\n",
        "## Explanation of Properties\n",
        "\n",
        "\n",
        "- **Idempotent**: Reapplying projection on the same set of attributes does not change the result. Once the attributes are reduced, further projection on the same set will not alter the relation.\n",
        "- **Commutative**: When projecting on overlapping or compatible sets of attributes, the order of application does not matter (the resulting attributes will still be the same).\n",
        "- **Non-distributive**: Unlike selection, projection cannot be freely distributed over operations such as selection, because projection limits the available attributes. It must respect the interaction between available attributes and conditions in the selection.\n",
        "\n",
        "\n",
        "\n",
        "## Projection - Π - Example 1\n",
        "\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "Given the *Courses(ID,Course,Term,Enrl)* below:"
      ],
      "id": "fa9da047"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "show_df(df)"
      ],
      "id": "131209db",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}\n",
        "Π(ID,Course)(Courses) returns:"
      ],
      "id": "5c6c0c46"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "new_df = df[ [\"ID\",\"Course\"] ]\n",
        "show_df( new_df, width=\"50%\" )"
      ],
      "id": "4dbe88ab",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "#\n",
        "\n",
        "## Projection - Π - Example 2\n",
        "\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "Given the *Courses(ID,Course,Term,Enrl)* below:"
      ],
      "id": "277aa100"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "show_df(df)"
      ],
      "id": "e5ba0917",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}\n",
        "Π(Course)(Courses) returns:"
      ],
      "id": "17476942"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "new_df = df[ [\"Course\"] ]\n",
        "show_df( new_df, width=\"50%\" )"
      ],
      "id": "8f5280cc",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "#\n",
        "\n",
        "## Projection - Π - Example 3\n",
        "\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "Given the *Courses(ID,Course,Term,Enrl)* below:"
      ],
      "id": "df55ebaf"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "show_df(df)"
      ],
      "id": "a15da8d2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}\n",
        "Π(Term)(Courses) returns:"
      ],
      "id": "7e1612d4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "new_df = df[ [\"Term\"] ]\n",
        "show_df( new_df, width=\"50%\" )"
      ],
      "id": "e98afcd7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "#\n",
        "\n",
        "## Projection - Π - Example 4\n",
        "\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "Given the *Courses(ID,Course,Term,Enrl)* below:"
      ],
      "id": "d86d0637"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "show_df(df)"
      ],
      "id": "69bde771",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}\n",
        "Π(Term,ID)(Courses) returns:"
      ],
      "id": "fdaa3734"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "new_df = df[ [\"Term\",\"ID\"] ]\n",
        "show_df( new_df, width=\"50%\" )"
      ],
      "id": "8f6fe7b4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "\n",
        "\n",
        "## Union Operation in Relational Algebra\n"
      ],
      "id": "692659bc"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "\n",
        "d1 = {\n",
        "    'Course': ['CMSC301', 'CMSC408',  'CMSC408'],\n",
        "    'Term': ['Fall 2024','Fall 2024', 'Fall 2023'],\n",
        "}\n",
        "d2 = {\n",
        "    'Course': ['CMSC110', 'CMSC201',  'CMSC475', 'CMSC408'],\n",
        "    'Term': ['Fall 2024','Fall 2024', 'Fall 2023','Fall 2024'],\n",
        "}\n",
        "d3 = {\n",
        "   'Term': ['Fall 2022','Fall 2023','Fall 2024'],\n",
        "   'Term_code': ['202310','202410','202510']\n",
        "}\n",
        "\n",
        "df1 = pd.DataFrame( d1 )\n",
        "df2 = pd.DataFrame( d2 )\n",
        "df3 = pd.DataFrame( d3 )"
      ],
      "id": "cf6c7e00",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The union operation combines tuples from two relations, eliminating duplicates. It's an essential set operation in relational algebra, used for merging query results.\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "**∪ - Union Operator**\n",
        "\n",
        "- Union combines two relations into a single relation.\n",
        "- Both relations must be union-compatible (same number of attributes and domains).\n",
        "- Denoted as R ∪ S.\n",
        "- Duplicates are automatically removed from the result.\n",
        "- Union is a binary operation, meaning it operates on two relations.\n",
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}"
      ],
      "id": "86c65b30"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib_venn import venn2\n",
        "\n",
        "# Define the two sets\n",
        "set_A = {1, 2, 3, 4}\n",
        "set_B = {4, 5, 6, 7}\n",
        "\n",
        "# Create the Venn diagram with custom colors\n",
        "venn = venn2([set_A, set_B], set_labels=('Set A', 'Set B'))\n",
        "\n",
        "# Set all patches to 'lightblue' color\n",
        "for subset in ('10', '01', '11'):\n",
        "    venn.get_patch_by_id(subset).set_color('lightblue')\n",
        "    venn.get_patch_by_id(subset).set_edgecolor('black')  # Thin black borders\n",
        "    venn.get_patch_by_id(subset).set_linewidth(1.5)      # Adjust the border width\n",
        "\n",
        "# Remove the default labels for A and B\n",
        "venn.get_label_by_id('10').set_text('')\n",
        "venn.get_label_by_id('01').set_text('')\n",
        "venn.get_label_by_id('11').set_text('')\n",
        "\n",
        "# Make the background transparent\n",
        "plt.gca().set_facecolor('none')\n",
        "\n",
        "# Display the plot\n",
        "plt.title('A ∪ B')\n",
        "plt.show()"
      ],
      "id": "40d77eb4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**Examples**\n",
        "\n",
        "1. *Courses1* ∪ *Courses2*\n",
        "\n",
        "1. *Courses1* ∪ *Courses3*\n",
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "*The union operation enables the merging of datasets in a relational context.*\n",
        "\n",
        "\n",
        "\n",
        "## Definition of Union Operator\n",
        "\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=98%}\n",
        "**Definition**\n",
        "\n",
        "$$\n",
        "R_1 \\cup R_2 = { t \\mid t \\in R_1 \\text{ or } t \\in R_2 }\n",
        "$$\n",
        "\n",
        "- where $t$ is a row (tuple),\n",
        "- $R_1$ and $R_2$ are relations (tables) with the same attributes,\n",
        "- The union operation returns a new relation containing all distinct rows that are present in either $R_1$, $R_2$, or both,\n",
        "- Duplicate rows are eliminated in the result, ensuring the output is a set, not a multiset.\n",
        ":::\n",
        "::: {.column width=1%}\n",
        ":::\n",
        "::: {.column width=1%}\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "\n",
        "\n",
        "## Properties of Union\n",
        "\n",
        "\n",
        "- **Idempotent** – Applying the union of a relation with itself doesn't change the result:\n",
        "\n",
        "$$\n",
        "R \\cup R = R\n",
        "$$\n",
        "\n",
        "- **Commutative** – The order of relations in a union operation doesn't matter:\n",
        "\n",
        "$$\n",
        "R_1 \\cup R_2 = R_2 \\cup R_1\n",
        "$$\n",
        "\n",
        "- **Associative** – The grouping of union operations doesn't affect the result:\n",
        "\n",
        "$$\n",
        "(R_1 \\cup R_2) \\cup R_3 = R_1 \\cup (R_2 \\cup R_3)\n",
        "$$\n",
        "\n",
        "- **Union with an empty set** – The union of a relation with an empty set is the relation itself:\n",
        "\n",
        "$$\n",
        "R \\cup \\emptyset = R\n",
        "$$\n",
        "\n",
        "- **Union distributes over intersection** – The union of two relations distributes over their intersection:\n",
        "\n",
        "$$\n",
        "R_1 \\cup (R_2 \\cap R_3) = (R_1 \\cup R_2) \\cap (R_1 \\cup R_3)\n",
        "$$\n",
        "\n",
        "\n",
        "\n",
        "## Explanation of Properties\n",
        "\n",
        "\n",
        "- **Idempotent**: Combining a relation with itself does not add any new rows since the union eliminates duplicates.\n",
        "- **Commutative**: The union is symmetric, so the order of relations does not affect the result.\n",
        "- **Associative**: You can group union operations in any way, and the result will be the same.\n",
        "- **Union with an empty set**: Union with an empty relation results in the original relation, as the empty set contributes no rows.\n",
        "- **Distributed**: Union distributes over intersection in a way that respects the structure of both operations.\n",
        "\n",
        "\n",
        "\n",
        "## Union - ∪ - Example 1\n",
        "\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "Given *Courses1( Course,Term)*:"
      ],
      "id": "6a866503"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "show_df(df1)"
      ],
      "id": "0aaab682",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "and *Courses2( Course,Term )*:"
      ],
      "id": "8876aff7"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "show_df(df2)"
      ],
      "id": "9ea247d0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}\n",
        "*Courses1* ∪ *Courses2* returns:"
      ],
      "id": "d800eb3f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "new_df = pd.concat( [df1, df2] )\n",
        "show_df( new_df )"
      ],
      "id": "ad9ed1c8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "\n",
        "\n",
        "## Union - ∪ - Example 2\n",
        "\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "Given *Courses1( Course,Term)*:"
      ],
      "id": "3aae3c31"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "show_df(df1)"
      ],
      "id": "8e212b42",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "and *Courses3( Course,Term )*:"
      ],
      "id": "3bb8bda1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "show_df(df3)"
      ],
      "id": "ab5b1694",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}\n",
        "*Courses1* ∪ *Courses3* returns:\n",
        "\n",
        "<center>*Invalid*</center>\n",
        "<p>&nbsp;</p>\n",
        "\n",
        "Because the schema for Courses1 and Courses3 are different, that is, the number, names, and domains of the columns don't match exactly,\n",
        "the two relations cannot be combined.\n",
        "\n",
        "The term *Union Compatible* is used to describe two relations with the same number, names, and domains of columns.\n",
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "\n",
        "\n",
        "## Combining Selection and Projection\n",
        "\n",
        "\n",
        "In real-world queries, selection and projection are often combined to both filter and reduce data. This allows for more refined and efficient query results.\n",
        "\n",
        "In relational algebra operations can be chained, that is, the results from one operation can be directly used inside another operation.\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "- Suppose we have a relation Students(Name, Grade).\n",
        "- Query: Π(Name)(σ(Grade > 75)(Students)).\n",
        "- The result includes only the names of students with grades above 75.\n",
        "- Combining operations allows for more complex and specific queries.\n",
        "- Selection and projection together form the backbone of query design.\n",
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}\n",
        "- Relational operations are ordered from the inside to the outside.\n",
        "- Given this query: Π(Name)(σ(Grade > 75)(Students))\n",
        "  - First, the selection operation is performed, resulting in a subset of the original relation,\n",
        "  - then, the projection operation is performed, reducing the number of columns in the result.\n",
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "*Combining operations enables precise and targeted query results in relational databases.*"
      ],
      "id": "03a5fb19"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "# Create the Students table as a pandas DataFrame\n",
        "data = {\n",
        "    'ID': ['V10101','V10102','V10103','V10104'],\n",
        "    'Name': ['Alice', 'Bob', 'Carol', 'Dave'],\n",
        "    'Major': ['CS', 'Math', 'CS', 'Physics'],\n",
        "    'GPA': [3.5, 3.8, 3.2, 3.9],\n",
        "    'Grad_Year': [2024, 2023, 2025, 2023]\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)"
      ],
      "id": "9174fb59",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Combined Example 1\n",
        "\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "Given *Students( ID,Name,Major,GPA,Grad_Year)*:"
      ],
      "id": "f9c1d396"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "show_df(df)"
      ],
      "id": "aee2fb40",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}\n",
        "Find the Names and GPAs of all students who are expected to graduate in 2023.\n",
        "\n",
        "Π(Name,GPA)(σ(Grad_Year=2023)(Students))"
      ],
      "id": "05c9dfe0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "new_df = df[ df[\"Grad_Year\"]==2023][[\"Name\",\"GPA\"]]\n",
        "show_df( new_df )"
      ],
      "id": "78de7b8c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "\n",
        "\n",
        "## Combined Example 2\n",
        "\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "Given *Students( ID,Name,Major,GPA,Grad_Year)*:"
      ],
      "id": "be2898d3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "show_df(df)"
      ],
      "id": "1250f031",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}\n",
        "Find the majors of all students with a GPA greater than 3.5\n",
        "\n",
        "Π(Major)(σ(GPA>3.5)(Students))"
      ],
      "id": "62af4b7f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "new_df = df\n",
        "new_df = df[ df[\"GPA\"]>3.5][[\"Major\"]]\n",
        "show_df( new_df )"
      ],
      "id": "fb479022",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "\n",
        "\n",
        "## Combined Example 3\n",
        "\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "Given *Students( ID,Name,Major,GPA,Grad_Year)*:"
      ],
      "id": "c7a6acdf"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "show_df(df)"
      ],
      "id": "bb503057",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}\n",
        "Find the ID and Names of all students in computer science.\n",
        "\n",
        "Π(ID,Name)(σ(Major=CS)(Students))"
      ],
      "id": "3413f344"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "new_df = df\n",
        "new_df = df[ df[\"Major\"]=='CS'][[\"ID\",\"Name\"]]\n",
        "show_df( new_df )"
      ],
      "id": "e139b945",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "\n",
        "\n",
        "## Larger Reporting Systems\n",
        "\n",
        "\n",
        "Relational algebra operations are commonly used in reporting systems to query data, extract insights, and generate reports. Below are examples of larger operations as applied in practice.\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "1. Example: Generating a list of employees eligible for a bonus.\n",
        "\n",
        "   - Selection operation to filter eligible employees based on criteria (e.g., performance).\n",
        "   - Projection to display only relevant fields (e.g., Name, Department).\n",
        "   - Union to combine results from different departments.\n",
        "\n",
        "1. Example: Generating a report of products sold by specific vendors.\n",
        "\n",
        "   - Selection to filter products by vendor ID.\n",
        "   - Projection to display product name and vendor details.\n",
        "   - Cartesian product to cross-reference products with vendor data.\n",
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}\n",
        "3. Example: Compiling a list of employees not assigned to any projects.\n",
        "\n",
        "   - Anti-join to find employees not in the project assignment table.\n",
        "   - Projection to show employee names and departments.\n",
        "   - Set difference to exclude employees with assignments from the employee list.\n",
        "\n",
        "1. Example: Producing a report of sales trends over time.\n",
        "\n",
        "   - Selection to filter sales data by date range.\n",
        "   - Aggregation to calculate sales totals by month or quarter.\n",
        "   - Join to merge sales data with product or category details.\n",
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "Note that these examples introduce additional operators to complement the *Selection*, *Projection* and *Union* already discussed.  That's what we'll discuss next!\n",
        "\n",
        "\n",
        "\n",
        "## Larger Reporting Systems\n",
        "\n",
        "\n",
        "On the preceding slide:\n",
        "\n",
        "- Each of these examples is considered a *single query* even though they contains multiple single relational operations.\n",
        "\n",
        "- Your semester long project must document 20 unique queries.  To accomplish this, you'll need plenty of entities (tables).\n",
        "\n",
        "\n",
        "\n",
        "## Larger Reporting Systems\n",
        "\n",
        "\n",
        "Relational algebra operations are commonly used in reporting systems to query data, extract insights, and generate reports. Below are examples of larger operations as applied in practice.\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=47%}\n",
        "1. Example: Generating a list of employees eligible for a bonus.\n",
        "\n",
        "   - Selection operation to filter eligible employees based on criteria (e.g., performance).\n",
        "   - Projection to display only relevant fields (e.g., Name, Department).\n",
        "   - Union to combine results from different departments.\n",
        "\n",
        "1. Example: Generating a report of products sold by specific vendors.\n",
        "\n",
        "   - Selection to filter products by vendor ID.\n",
        "   - Projection to display product name and vendor details.\n",
        "   - Cartesian product to cross-reference products with vendor data.\n",
        ":::\n",
        "::: {.column width=6%}\n",
        ":::\n",
        "::: {.column width=47%}\n",
        "3. Example: Compiling a list of employees not assigned to any projects.\n",
        "\n",
        "   - Anti-join to find employees not in the project assignment table.\n",
        "   - Projection to show employee names and departments.\n",
        "   - Set difference to exclude employees with assignments from the employee list.\n",
        "\n",
        "1. Example: Producing a report of sales trends over time.\n",
        "\n",
        "   - Selection to filter sales data by date range.\n",
        "   - Aggregation to calculate sales totals by month or quarter.\n",
        "   - Join to merge sales data with product or category details.\n",
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "Note that these examples introduce additional operators to complement the *Selection*, *Projection* and *Union* already discussed.  That's what we'll discuss next!\n",
        "\n",
        "\n",
        "\n",
        "## Larger Reporting Systems\n",
        "\n",
        "\n",
        "On the preceding slide:\n",
        "\n",
        "- Each of these examples is considered a *single query* even though they contains multiple single relational operations.\n",
        "\n",
        "- Your semester long project must document 20 unique queries.  To accomplish this, you'll need plenty of entities (tables).\n",
        "\n",
        "\n",
        "\n",
        "## Conclusion: Mastering Basic Relational Algebra\n",
        "\n",
        "\n",
        "Understanding the basic operations of relational algebra is crucial for working with relational databases. These operations enable effective data querying, filtering, and combination.\n",
        "\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=98%}\n",
        "- Selection, projection, and union are foundational operations.\n",
        "- Each operation serves a specific purpose in querying relational data.\n",
        "- Combining operations enables more complex and powerful queries.\n",
        "- Mastering these operations is essential for advanced database management.\n",
        "- Relational algebra forms the core of SQL and other query languages.\n",
        ":::\n",
        "::: {.column width=1%}\n",
        ":::\n",
        "::: {.column width=1%}\n",
        "\n",
        ":::\n",
        "::::\n",
        "\n",
        "<!-- -->\n",
        "\n",
        "*Mastering relational algebra is key to becoming proficient in database management and query design.*\n"
      ],
      "id": "b46ef7a1"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\jdleonard\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\cmsc427-yciDUe4a-py3.13\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}